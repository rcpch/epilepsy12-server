# Generated by Django 4.2.5 on 2023-09-25 16:54

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import epilepsy12.models_folder.help_text_mixin
import epilepsy12.validators
import simple_history.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Epilepsy12User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        help_text="Enter your first name",
                        max_length=150,
                        null=True,
                        verbose_name="First name",
                    ),
                ),
                (
                    "surname",
                    models.CharField(
                        blank=True,
                        help_text="Enter your surname",
                        max_length=150,
                        null=True,
                        verbose_name="Surname",
                    ),
                ),
                (
                    "title",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Mr"),
                            (2, "Mrs"),
                            (3, "Ms"),
                            (4, "Dr"),
                            (5, "Professor"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "This email address is already in use."
                        },
                        help_text="Enter your email address.",
                        max_length=254,
                        unique=True,
                        verbose_name="Email address",
                    ),
                ),
                ("is_active", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                ("is_rcpch_audit_team_member", models.BooleanField(default=False)),
                ("is_rcpch_staff", models.BooleanField(default=False)),
                ("is_patient_or_carer", models.BooleanField(default=False)),
                (
                    "view_preference",
                    models.SmallIntegerField(
                        choices=[(0, "organisation"), (1, "trust"), (2, "national")],
                        default=0,
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "role",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Lead Clinician"),
                            (2, "Clinician"),
                            (3, "Administrator"),
                            (4, "RCPCH Audit Team"),
                            (7, "RCPCH Audit Children and Family"),
                        ],
                        null=True,
                    ),
                ),
                ("email_confirmed", models.BooleanField(default=False)),
                (
                    "password_last_set",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
            options={
                "verbose_name": "Epilepsy12 User",
                "verbose_name_plural": "Epilepsy12 Users",
            },
        ),
        migrations.CreateModel(
            name="AntiEpilepsyMedicine",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_rescue_medicine",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Is the medicine a rescue medicine?",
                            "reference": "Is the medicine a rescue medicine?",
                        },
                        null=True,
                    ),
                ),
                (
                    "antiepilepsy_medicine_start_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Medicine start date",
                            "reference": "Antiepilepsy medicine start date",
                        },
                        null=True,
                    ),
                ),
                (
                    "antiepilepsy_medicine_stop_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Medicine discontinued date",
                            "reference": "Antiseizure medicine discontinued date",
                        },
                        null=True,
                    ),
                ),
                (
                    "antiepilepsy_medicine_risk_discussed",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Medication risks discussed?",
                            "reference": "Have the risks related to the antiseizure medicine been discussed with the child/young person and their family?",
                        },
                        null=True,
                    ),
                ),
                (
                    "is_a_pregnancy_prevention_programme_needed",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Is a pregnancy prevention programme indicated?",
                            "reference": "For girls and young women who are prescribed sodium valproate, it is recommended that pregnancy prevention is actively discussed and documented.",
                        },
                        null=True,
                    ),
                ),
                (
                    "has_a_valproate_annual_risk_acknowledgement_form_been_completed",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a Valproate - Annual Risk Acknowledgment Form been completed?",
                            "reference": "For girls and young women who are prescribed sodium valproate, it is recommended that Has an annual Valproate - Annual Risk Acknowledgment Form is completed.",
                        },
                        null=True,
                    ),
                ),
                (
                    "is_a_pregnancy_prevention_programme_in_place",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Is the Valproate Pregnancy Prevention Programme in place?",
                            "reference": "For girls and young women who are prescribed sodium valproate, it is recommended that pregnancy prevention is actively discussed and documented.",
                        },
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Antiepilepsy Medicine",
                "verbose_name_plural": "Antiepilepsy Medicines",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="Assessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "childrens_epilepsy_surgical_service_referral_criteria_met",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Are ANY of these criteria present?",
                            "reference": "Have ANY of the criteria for referral to a children's epilepsy surgery service been met?",
                        },
                        null=True,
                    ),
                ),
                (
                    "consultant_paediatrician_referral_made",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a referral been made to a consultant paediatrician with expertise in epilepsies?",
                            "reference": "Has a referral been made to a consultant paediatrician with expertise in epilepsies?",
                        },
                        null=True,
                    ),
                ),
                (
                    "consultant_paediatrician_referral_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date of referral to a consultant paediatrician with expertise in epilepsies.",
                            "reference": "Has a referral been made to a consultant paediatrician with expertise in epilepsies?",
                        },
                        null=True,
                    ),
                ),
                (
                    "consultant_paediatrician_input_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date seen by a consultant paediatrician with expertise in epilepsies.",
                            "reference": "Date seen by a consultant paediatrician with expertise in epilepsies.",
                        },
                        null=True,
                    ),
                ),
                (
                    "paediatric_neurologist_referral_made",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a referral to a consultant paediatric neurologist been made?",
                            "reference": "Has a referral to a consultant paediatric neurologist been made?",
                        },
                        null=True,
                    ),
                ),
                (
                    "paediatric_neurologist_referral_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date of referral to a consultant paediatric neurologist.",
                            "reference": "Date of referral to a consultant paediatric neurologist.",
                        },
                        null=True,
                    ),
                ),
                (
                    "paediatric_neurologist_input_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date seen by consultant paediatric neurologist.",
                            "reference": "Date seen by consultant paediatric neurologist.",
                        },
                        null=True,
                    ),
                ),
                (
                    "childrens_epilepsy_surgical_service_referral_made",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a referral to a children's epilepsy surgery service been made?",
                            "reference": "Has a referral to a children's epilepsy surgery service been made?",
                        },
                        null=True,
                    ),
                ),
                (
                    "childrens_epilepsy_surgical_service_referral_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date of referral to a children's epilepsy surgery service",
                            "reference": "Date of referral to a children's epilepsy surgery service",
                        },
                        null=True,
                    ),
                ),
                (
                    "childrens_epilepsy_surgical_service_input_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date seen by children's epilepsy surgery service",
                            "reference": "Date seen by children's epilepsy surgery service",
                        },
                        null=True,
                    ),
                ),
                (
                    "epilepsy_specialist_nurse_referral_made",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a referral to an epilepsy nurse specialist been made?",
                            "reference": "Has a referral to an epilepsy nurse specialist been made?",
                        },
                        null=True,
                    ),
                ),
                (
                    "epilepsy_specialist_nurse_referral_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date of referral to an epilepsy nurse specialist",
                            "reference": "Date of referral to an epilepsy nurse specialist",
                        },
                        null=True,
                    ),
                ),
                (
                    "epilepsy_specialist_nurse_input_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date seen by an epilepsy nurse specialist",
                            "reference": "Date seen by an epilepsy nurse specialist",
                        },
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Assessment",
                "verbose_name_plural": "Assessment",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="AuditProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "registration_complete",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "registration_total_expected_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields expected",
                    ),
                ),
                (
                    "registration_total_completed_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields completed",
                    ),
                ),
                (
                    "first_paediatric_assessment_complete",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "first_paediatric_assessment_total_expected_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields expected",
                    ),
                ),
                (
                    "first_paediatric_assessment_total_completed_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields completed",
                    ),
                ),
                ("assessment_complete", models.BooleanField(default=False, null=True)),
                (
                    "assessment_total_expected_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields expected",
                    ),
                ),
                (
                    "assessment_total_completed_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields completed",
                    ),
                ),
                (
                    "epilepsy_context_complete",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "epilepsy_context_total_expected_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields expected",
                    ),
                ),
                (
                    "epilepsy_context_total_completed_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields completed",
                    ),
                ),
                (
                    "multiaxial_diagnosis_complete",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "multiaxial_diagnosis_total_expected_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields expected",
                    ),
                ),
                (
                    "multiaxial_diagnosis_total_completed_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields completed",
                    ),
                ),
                (
                    "investigations_complete",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "investigations_total_expected_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields expected",
                    ),
                ),
                (
                    "investigations_total_completed_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields completed",
                    ),
                ),
                ("management_complete", models.BooleanField(default=False, null=True)),
                (
                    "management_total_expected_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields expected",
                    ),
                ),
                (
                    "management_total_completed_fields",
                    models.SmallIntegerField(
                        default=0,
                        null=True,
                        verbose_name="Total Number of fields completed",
                    ),
                ),
                (
                    "consent_patient_confirmed",
                    models.BooleanField(default=None, null=True),
                ),
                (
                    "details_patient_confirmed",
                    models.BooleanField(default=None, null=True),
                ),
            ],
            options={
                "verbose_name": "Audit Progress",
                "verbose_name_plural": "Audit Progresses",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="BaseKPIMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "paediatrician_with_expertise_in_epilepsies_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "paediatrician_with_expertise_in_epilepsies_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "paediatrician_with_expertise_in_epilepsies_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "paediatrician_with_expertise_in_epilepsies_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "epilepsy_specialist_nurse_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "epilepsy_specialist_nurse_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "epilepsy_specialist_nurse_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "epilepsy_specialist_nurse_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "tertiary_input_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "tertiary_input_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "tertiary_input_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "tertiary_input_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "epilepsy_surgery_referral_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "epilepsy_surgery_referral_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "epilepsy_surgery_referral_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "epilepsy_surgery_referral_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "ecg_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "ecg_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "ecg_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "ecg_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "mri_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "mri_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "mri_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "mri_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "assessment_of_mental_health_issues_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "assessment_of_mental_health_issues_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "assessment_of_mental_health_issues_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "assessment_of_mental_health_issues_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "mental_health_support_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "mental_health_support_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "mental_health_support_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "mental_health_support_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "sodium_valproate_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "sodium_valproate_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "sodium_valproate_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "sodium_valproate_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "comprehensive_care_planning_agreement_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "comprehensive_care_planning_agreement_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "comprehensive_care_planning_agreement_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "comprehensive_care_planning_agreement_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "patient_held_individualised_epilepsy_document_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "patient_held_individualised_epilepsy_document_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "patient_held_individualised_epilepsy_document_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "patient_held_individualised_epilepsy_document_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "patient_carer_parent_agreement_to_the_care_planning_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "patient_carer_parent_agreement_to_the_care_planning_total_eligible",
                    models.IntegerField(
                        db_column="pt_carer_parent_agree_care_place_total_eligible",
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "patient_carer_parent_agreement_to_the_care_planning_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "patient_carer_parent_agreement_to_the_care_planning_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "care_planning_has_been_updated_when_necessary_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "care_planning_has_been_updated_when_necessary_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "care_planning_has_been_updated_when_necessary_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "care_planning_has_been_updated_when_necessary_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "comprehensive_care_planning_content_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "comprehensive_care_planning_content_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "comprehensive_care_planning_content_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "comprehensive_care_planning_content_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "parental_prolonged_seizures_care_plan_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "parental_prolonged_seizures_care_plan_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "parental_prolonged_seizures_care_plan_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "parental_prolonged_seizures_care_plan_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "water_safety_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "water_safety_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "water_safety_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "water_safety_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "first_aid_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "first_aid_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "first_aid_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "first_aid_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "general_participation_and_risk_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "general_participation_and_risk_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "general_participation_and_risk_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "general_participation_and_risk_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "service_contact_details_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "service_contact_details_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "service_contact_details_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "service_contact_details_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "sudep_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "sudep_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "sudep_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "sudep_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "school_individual_healthcare_plan_passed",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "school_individual_healthcare_plan_total_eligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "school_individual_healthcare_plan_ineligible",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
                (
                    "school_individual_healthcare_plan_incomplete",
                    models.IntegerField(
                        default=None,
                        help_text={"label": "", "reference": ""},
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Case",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "locked",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        null=True,
                        verbose_name="\n        This determines if the case is locked from editing\n        Cases can be locked under either of 2 sets of circumstances\n        1. The child has opted out of the audit \n        - here all data relating to the child's ID is set to None but the ID retained.\n        - in the UI, blank spaces in the case_list are rendered as ######\n        2. All the fields for the child have been completed and the user has indicated the child is ready for submission.\n        - The upload button in the UI is enabled up until the submission deadline to toggle the locked status\n        3. The submission deadline has passed. The case is locked, irrespective of if fields are complete are not.\n        Locked",
                    ),
                ),
                (
                    "locked_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date record locked"
                    ),
                ),
                (
                    "nhs_number",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        unique=True,
                        verbose_name="NHS Number",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="First name"
                    ),
                ),
                (
                    "surname",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Surname"
                    ),
                ),
                (
                    "sex",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "Not Known"),
                            (1, "Male"),
                            (2, "Female"),
                            (9, "Not Specified"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True, null=True, verbose_name="date of birth (YYYY-MM-DD)"
                    ),
                ),
                (
                    "postcode",
                    models.CharField(
                        blank=True, max_length=8, null=True, verbose_name="postcode"
                    ),
                ),
                (
                    "ethnicity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N", "African"),
                            ("L", "Any other Asian background"),
                            ("P", "Any other Black background"),
                            ("S", "Any other ethnic group"),
                            ("G", "Any other mixed background"),
                            ("C", "Any other White background"),
                            ("K", "Bangladeshi or British Bangladeshi"),
                            ("A", "British, Mixed British"),
                            ("M", "Caribbean"),
                            ("R", "Chinese"),
                            ("H", "Indian or British Indian"),
                            ("B", "Irish"),
                            ("Z", "Not Stated"),
                            ("J", "Pakistani or British Pakistani"),
                            ("F", "Mixed (White and Asian)"),
                            ("E", "Mixed (White and Black African)"),
                            ("D", "Mixed (White and Black Caribbean)"),
                        ],
                        max_length=4,
                        null=True,
                    ),
                ),
                (
                    "index_of_multiple_deprivation_quintile",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="index of multiple deprivation calculated from MySociety data.",
                    ),
                ),
            ],
            options={
                "verbose_name": "Patient",
                "verbose_name_plural": "Patients",
                "permissions": [
                    (
                        "can_lock_child_case_data_from_editing",
                        "Can lock a child's record from editing.",
                    ),
                    (
                        "can_unlock_child_case_data_from_editing",
                        "Can unlock a child's record from editing.",
                    ),
                    (
                        "can_opt_out_child_from_inclusion_in_audit",
                        "Can sanction an opt out from participating in the audit. Note all the child's date except Epilepsy12 unique identifier are irretrievably deleted.",
                    ),
                    (
                        "can_consent_to_audit_participation",
                        "Can consent to participating in Epilepsy12.",
                    ),
                ],
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="Comorbidity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "comorbidity_diagnosis_date",
                    models.DateField(
                        default=None,
                        help_text={
                            "label": "What is the date of diagnosis?",
                            "reference": "What is the date of diagnosis?",
                        },
                        max_length=50,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Comorbidity",
                "verbose_name_plural": "Comorbidities",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="ComorbidityList",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "conceptId",
                    models.CharField(blank=True, default=None, null=True, unique=True),
                ),
                ("term", models.CharField(blank=True, default=None, null=True)),
                (
                    "preferredTerm",
                    models.CharField(blank=True, default=None, null=True),
                ),
            ],
            options={
                "verbose_name": "ComorbidityList",
                "verbose_name_plural": "ComorbidityLists",
            },
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("boundary_identifier", models.CharField(max_length=9)),
                ("name", models.CharField(max_length=16)),
                ("welsh_name", models.CharField(max_length=17)),
                ("bng_e", models.BigIntegerField()),
                ("bng_n", models.BigIntegerField()),
                ("long", models.FloatField()),
                ("lat", models.FloatField()),
                ("globalid", models.CharField(max_length=38)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(srid=27700),
                ),
            ],
            options={
                "verbose_name": "Country",
                "verbose_name_plural": "Countries",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="EpilepsyCause",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "conceptId",
                    models.CharField(blank=True, default=None, null=True, unique=True),
                ),
                ("term", models.CharField(blank=True, default=None, null=True)),
                (
                    "preferredTerm",
                    models.CharField(blank=True, default=None, null=True),
                ),
            ],
            options={
                "verbose_name": "Epilepsy Cause",
                "verbose_name_plural": "Epilepsy Causes",
            },
        ),
        migrations.CreateModel(
            name="EpilepsyContext",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "previous_febrile_seizure",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Uncertain")],
                        default=None,
                        help_text={
                            "label": "At any point in time has the child had febrile seizure(s)?",
                            "reference": "At any point in time has the child had febrile seizure(s)?",
                        },
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "previous_acute_symptomatic_seizure",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Uncertain")],
                        default=None,
                        help_text={
                            "label": "At any point in time has the child had acute symptomatic seizure(s)?",
                            "reference": "At any point in time has the child had acute symptomatic seizure(s)?",
                        },
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "is_there_a_family_history_of_epilepsy",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Uncertain")],
                        default=None,
                        help_text={
                            "label": "Is there a family history of epilepsy?",
                            "reference": "Is there a family history of epilepsy?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "previous_neonatal_seizures",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Uncertain")],
                        default=None,
                        help_text={
                            "label": "Were there seizures in the neonatal period?",
                            "reference": "Were there seizures in the neonatal period?",
                        },
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "diagnosis_of_epilepsy_withdrawn",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "Has the diagnosis of epilepsy been withdrawn?",
                            "reference": "In the first year after first assessment, has a diagnosis of epilepsy been withdrawn because it has been subsequently deemed incorrect?",
                        },
                        null=True,
                    ),
                ),
                (
                    "were_any_of_the_epileptic_seizures_convulsive",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "Were any of the epileptic seizures convulsive?",
                            "reference": "Were any of the epileptic seizures convulsive?",
                        },
                        null=True,
                    ),
                ),
                (
                    "experienced_prolonged_generalized_convulsive_seizures",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Uncertain")],
                        default=None,
                        help_text={
                            "label": "Has the child at any point in time experienced prolonged generalised seizures?",
                            "reference": "Has the child at any point in time experienced prolonged generalised convulsive seizures > 5 min duration (or successive continuing > 5min)?",
                        },
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "experienced_prolonged_focal_seizures",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Uncertain")],
                        default=None,
                        help_text={
                            "label": "Has the child at any point in time experienced prolonged focal seizures?",
                            "reference": "Has the child at any point in time experienced prolonged focal seizures > 5 min duration (or successive continuing > 5min)?",
                        },
                        max_length=2,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Epilepsy Context",
                "verbose_name_plural": "Epilepsy Contexts",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="Episode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "expected_score",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
                (
                    "calculated_score",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
                (
                    "seizure_onset_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "When did the first episode of this type happen?",
                            "reference": "Date the first episode of this type occurred or was witnessed.",
                        },
                        null=True,
                    ),
                ),
                (
                    "seizure_onset_date_confidence",
                    models.CharField(
                        choices=[
                            ("Apx", "Approximate date"),
                            ("Exc", "Exact date"),
                            ("NK", "Not known"),
                        ],
                        default=None,
                        help_text={
                            "label": "Confidence in reported date of episode",
                            "reference": "How accurate is the date of this episode?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "episode_definition",
                    models.CharField(
                        choices=[
                            ("a", "This was a single episode"),
                            ("b", "This was a cluster within 24 hours"),
                            (
                                "c",
                                "These were 2 or more episodes more than 24 hours apart",
                            ),
                        ],
                        default=None,
                        help_text={
                            "label": "Episode definition",
                            "reference": "Episode definition. Part of case definition and defines if represents a cluster or discrete episodes.",
                        },
                        max_length=1,
                        null=True,
                        verbose_name="Episode definition. Part of case definition and defines if represents a cluster or discrete episodes.",
                    ),
                ),
                (
                    "has_description_of_the_episode_or_episodes_been_gathered",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "Has a description of the episode or episodes been gathered?",
                            "reference": "Has a description of the episode or episodes been gathered?",
                        },
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text={
                            "label": "What is the episode(s) like and is the description adequate?",
                            "reference": "Glossary of Descriptive Terminology for Ictal Semiology: Report of the ILAE Task Force on Classification and Terminology, 2002",
                        },
                        null=True,
                    ),
                ),
                (
                    "description_keywords",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            help_text="add a key word", max_length=500
                        ),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "epilepsy_or_nonepilepsy_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("E", "Epileptic"),
                            ("NE", "Non-epileptic"),
                            ("U", "Uncertain"),
                        ],
                        default=None,
                        help_text={
                            "label": "Is this episode epileptic, non-epileptic or uncertain?",
                            "reference": "Is this episode epileptic, non-epileptic or uncertain?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "epileptic_seizure_onset_type",
                    models.CharField(
                        choices=[
                            ("FO", "Focal onset"),
                            ("GO", "Generalised onset"),
                            ("UO", "Unknown onset"),
                            ("UC", "Unclassified"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best would describe the onset of the epileptic episode?",
                            "reference": "Operational classification of seizure types by the International League Against Epilepsy: Position Paper of the ILAE Commission for Classification and Terminology. Epilepsia, 58(4):522–530, 2017.",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "BPP",
                                "Behavioral Psychological And Psychiatric Disorders",
                            ),
                            ("MAD", "Migraine Associated Disorders"),
                            ("ME", "Miscellaneous Events"),
                            ("SRC", "Sleep Related Conditions"),
                            ("SAS", "Syncope And Anoxic Seizures"),
                            ("PMD", "Paroxysmal Movement Disorders"),
                            ("Oth", "Other"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the generalised nature of the nonepileptic episode(s)?",
                            "reference": "How best describes the generalised nature of the nonepileptic episode(s)?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "epileptic_generalised_onset",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("AEM", "Absence with eyelid myoclonia"),
                            ("Aab", "Atypical absence"),
                            ("Ato", "Atonic"),
                            ("Clo", "Clonic"),
                            ("EpS", "Epileptic spasms"),
                            ("MAb", "Myoclonic absence"),
                            ("MAt", "Myoclonic-atonic"),
                            ("MTC", "Myoclonic-tonic-clonic"),
                            ("MyC", "Myoclonic"),
                            ("Oth", "Other"),
                            ("TAb", "Typical absence"),
                            ("TCl", "Tonic-clonic"),
                            ("Ton", "Tonic"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the generalised nature of the epileptic episode(s)?",
                            "reference": "How best describes the generalised nature of the epileptic episode(s)?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "focal_onset_impaired_awareness",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_automatisms",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_atonic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_clonic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_left",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_right",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_epileptic_spasms",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_hyperkinetic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_myoclonic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_tonic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_autonomic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_behavioural_arrest",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_cognitive",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_emotional",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_sensory",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_centrotemporal",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_temporal",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_frontal",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_parietal",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_occipital",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_gelastic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_focal_to_bilateral_tonic_clonic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "nonepileptic_seizure_unknown_onset",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("BAr", "Behaviour arrest"),
                            ("EpS", "Epileptic spasms"),
                            ("TCl", "Tonic-clonic"),
                            ("Oth", "Other"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the onset of the nonepileptic episode(s)?",
                            "reference": "Operational classification of seizure types by the International League Against Epilepsy: Position Paper of the ILAE Commission for Classification and Terminology. Epilepsia, 58(4):522–530, 2017.",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_syncope",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "Vasovagal syncope"),
                            ("b", "Reflex anoxic seizures"),
                            ("c", "Breath-holding attacks"),
                            ("d", "Hyperventilation syncope"),
                            ("e", "Compulsive valsalva"),
                            ("f", "Neurological syncope"),
                            ("g", "Imposed upper airways obstruction"),
                            ("h", "Orthostatic intolerance"),
                            ("i", "Long QT and cardiac syncope"),
                            ("j", "Hyper-cyanotic spells"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the <i>type</i> of syncope?",
                            "reference": "How best describes the <i>type</i> of syncope?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_behavioural",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "Daydreaming / Inattention"),
                            ("b", "Infantile gratification"),
                            ("c", "Eidetic imagery"),
                            ("d", "Tantrums and rage reactions"),
                            ("e", "Out of body experiences"),
                            ("f", "Panic attacks"),
                            ("g", "Dissociative states"),
                            ("h", "Non-epileptic seizures"),
                            ("i", "Hallucinations in psychiatric disorders"),
                            ("j", "Fabricated / factitious illness"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the <i>type</i> of behavioural episode?",
                            "reference": "How best describes the <i>type</i> of behavioural episode?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_sleep",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "Sleep related rhythmic movement disorders"),
                            ("b", "Hypnogogic jerks"),
                            ("c", "Parasomnias"),
                            ("d", "REM sleep disorders"),
                            ("e", "Benign neonatal sleep myoclonus"),
                            ("f", "Periodic leg movements"),
                            ("g", "Narcolepsy-cataplexy"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the <i>type</i> of sleep event?",
                            "reference": "How best describes the <i>type</i> of sleep event?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_paroxysmal",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "Tics"),
                            ("b", "Stereotypies"),
                            ("c", "Paroxysmal kinesigenic dyskinesia"),
                            ("d", "Paroxysmal nonkinesigenic dyskinesia"),
                            ("e", "Paroxysmal exercise induced dyskinesia"),
                            ("f", "Benign paroxysmal tonic upgaze"),
                            ("g", "Episodic ataxias"),
                            ("h", "Alternating hemiplegia"),
                            ("i", "Hyperekplexia"),
                            ("j", "Opsoclonus-myoclonus syndrome"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the <i>type</i> of paroxysmal event?",
                            "reference": "How best describes the <i>type</i> of paroxysmal event?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_migraine",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "Migraine with visual aura"),
                            ("b", "Familial hemiplegic migraine"),
                            ("c", "Benign paroxysmal torticollis"),
                            ("d", "Benign paroxysmal vertigo"),
                            ("e", "Cyclical vomiting"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the <i>type</i> of migraine?",
                            "reference": "How best describes the <i>type</i> of migraine?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_miscellaneous",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "Benign myoclonus of infancy and shuddering attacks"),
                            ("b", "Jitteriness"),
                            ("c", "Sandifer syndrome"),
                            ("d", "Non-epileptic head drops"),
                            ("e", "Spasmus nutans"),
                            ("f", "Raised intracranial pressure"),
                            ("g", "Paroxysmal extreme pain disorder"),
                            ("h", "Spinal myoclonus"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the <i>subtype</i>?",
                            "reference": "How best describes the <i>subtype</i>?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_other",
                    models.CharField(
                        blank=True, default=None, max_length=250, null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Episode",
                "verbose_name_plural": "Episodes",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="FirstPaediatricAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "first_paediatric_assessment_in_acute_or_nonacute_setting",
                    models.IntegerField(
                        choices=[(1, "Acute"), (2, "Non-acute"), (3, "Don't know")],
                        default=None,
                        help_text={
                            "label": "Was the first paediatric assessment in an acute or nonacute setting?",
                            "reference": "Was the first paediatric assessment in an acute or nonacute setting?",
                        },
                        null=True,
                    ),
                ),
                (
                    "has_number_of_episodes_since_the_first_been_documented",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "The approximate frequency or number of episodes since the first episode",
                            "reference": "Has the approximate frequency or number of episodes since the first recorded episode been documented?",
                        },
                        null=True,
                    ),
                ),
                (
                    "general_examination_performed",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "General examination",
                            "reference": "has a general paediatric examination been performed?",
                        },
                        null=True,
                    ),
                ),
                (
                    "neurological_examination_performed",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "Neurological examination",
                            "reference": "Has a neurological examination been performed?",
                        },
                        null=True,
                    ),
                ),
                (
                    "developmental_learning_or_schooling_problems",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "Presence or absence of learning, developmental or educational difficulties",
                            "reference": "Has the presence or absence of developmental, learning or school-based problems been recorded?",
                        },
                        null=True,
                    ),
                ),
                (
                    "behavioural_or_emotional_problems",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "Presence or absence of emotional or behavioural problems",
                            "reference": "Has the presence or absence of emotional or behavioural problems been documented?",
                        },
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "First Paediatric Assessment",
                "verbose_name_plural": "First Paediatric Assessments",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="HistoricalAntiEpilepsyMedicine",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "is_rescue_medicine",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Is the medicine a rescue medicine?",
                            "reference": "Is the medicine a rescue medicine?",
                        },
                        null=True,
                    ),
                ),
                (
                    "antiepilepsy_medicine_start_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Medicine start date",
                            "reference": "Antiepilepsy medicine start date",
                        },
                        null=True,
                    ),
                ),
                (
                    "antiepilepsy_medicine_stop_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Medicine discontinued date",
                            "reference": "Antiseizure medicine discontinued date",
                        },
                        null=True,
                    ),
                ),
                (
                    "antiepilepsy_medicine_risk_discussed",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Medication risks discussed?",
                            "reference": "Have the risks related to the antiseizure medicine been discussed with the child/young person and their family?",
                        },
                        null=True,
                    ),
                ),
                (
                    "is_a_pregnancy_prevention_programme_needed",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Is a pregnancy prevention programme indicated?",
                            "reference": "For girls and young women who are prescribed sodium valproate, it is recommended that pregnancy prevention is actively discussed and documented.",
                        },
                        null=True,
                    ),
                ),
                (
                    "has_a_valproate_annual_risk_acknowledgement_form_been_completed",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a Valproate - Annual Risk Acknowledgment Form been completed?",
                            "reference": "For girls and young women who are prescribed sodium valproate, it is recommended that Has an annual Valproate - Annual Risk Acknowledgment Form is completed.",
                        },
                        null=True,
                    ),
                ),
                (
                    "is_a_pregnancy_prevention_programme_in_place",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Is the Valproate Pregnancy Prevention Programme in place?",
                            "reference": "For girls and young women who are prescribed sodium valproate, it is recommended that pregnancy prevention is actively discussed and documented.",
                        },
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Antiepilepsy Medicine",
                "verbose_name_plural": "historical Antiepilepsy Medicines",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalAssessment",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "childrens_epilepsy_surgical_service_referral_criteria_met",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Are ANY of these criteria present?",
                            "reference": "Have ANY of the criteria for referral to a children's epilepsy surgery service been met?",
                        },
                        null=True,
                    ),
                ),
                (
                    "consultant_paediatrician_referral_made",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a referral been made to a consultant paediatrician with expertise in epilepsies?",
                            "reference": "Has a referral been made to a consultant paediatrician with expertise in epilepsies?",
                        },
                        null=True,
                    ),
                ),
                (
                    "consultant_paediatrician_referral_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date of referral to a consultant paediatrician with expertise in epilepsies.",
                            "reference": "Has a referral been made to a consultant paediatrician with expertise in epilepsies?",
                        },
                        null=True,
                    ),
                ),
                (
                    "consultant_paediatrician_input_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date seen by a consultant paediatrician with expertise in epilepsies.",
                            "reference": "Date seen by a consultant paediatrician with expertise in epilepsies.",
                        },
                        null=True,
                    ),
                ),
                (
                    "paediatric_neurologist_referral_made",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a referral to a consultant paediatric neurologist been made?",
                            "reference": "Has a referral to a consultant paediatric neurologist been made?",
                        },
                        null=True,
                    ),
                ),
                (
                    "paediatric_neurologist_referral_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date of referral to a consultant paediatric neurologist.",
                            "reference": "Date of referral to a consultant paediatric neurologist.",
                        },
                        null=True,
                    ),
                ),
                (
                    "paediatric_neurologist_input_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date seen by consultant paediatric neurologist.",
                            "reference": "Date seen by consultant paediatric neurologist.",
                        },
                        null=True,
                    ),
                ),
                (
                    "childrens_epilepsy_surgical_service_referral_made",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a referral to a children's epilepsy surgery service been made?",
                            "reference": "Has a referral to a children's epilepsy surgery service been made?",
                        },
                        null=True,
                    ),
                ),
                (
                    "childrens_epilepsy_surgical_service_referral_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date of referral to a children's epilepsy surgery service",
                            "reference": "Date of referral to a children's epilepsy surgery service",
                        },
                        null=True,
                    ),
                ),
                (
                    "childrens_epilepsy_surgical_service_input_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date seen by children's epilepsy surgery service",
                            "reference": "Date seen by children's epilepsy surgery service",
                        },
                        null=True,
                    ),
                ),
                (
                    "epilepsy_specialist_nurse_referral_made",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a referral to an epilepsy nurse specialist been made?",
                            "reference": "Has a referral to an epilepsy nurse specialist been made?",
                        },
                        null=True,
                    ),
                ),
                (
                    "epilepsy_specialist_nurse_referral_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date of referral to an epilepsy nurse specialist",
                            "reference": "Date of referral to an epilepsy nurse specialist",
                        },
                        null=True,
                    ),
                ),
                (
                    "epilepsy_specialist_nurse_input_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date seen by an epilepsy nurse specialist",
                            "reference": "Date seen by an epilepsy nurse specialist",
                        },
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Assessment",
                "verbose_name_plural": "historical Assessment",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCase",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "locked",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        null=True,
                        verbose_name="\n        This determines if the case is locked from editing\n        Cases can be locked under either of 2 sets of circumstances\n        1. The child has opted out of the audit \n        - here all data relating to the child's ID is set to None but the ID retained.\n        - in the UI, blank spaces in the case_list are rendered as ######\n        2. All the fields for the child have been completed and the user has indicated the child is ready for submission.\n        - The upload button in the UI is enabled up until the submission deadline to toggle the locked status\n        3. The submission deadline has passed. The case is locked, irrespective of if fields are complete are not.\n        Locked",
                    ),
                ),
                (
                    "locked_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date record locked"
                    ),
                ),
                (
                    "nhs_number",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=10,
                        null=True,
                        verbose_name="NHS Number",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="First name"
                    ),
                ),
                (
                    "surname",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Surname"
                    ),
                ),
                (
                    "sex",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "Not Known"),
                            (1, "Male"),
                            (2, "Female"),
                            (9, "Not Specified"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True, null=True, verbose_name="date of birth (YYYY-MM-DD)"
                    ),
                ),
                (
                    "postcode",
                    models.CharField(
                        blank=True, max_length=8, null=True, verbose_name="postcode"
                    ),
                ),
                (
                    "ethnicity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("N", "African"),
                            ("L", "Any other Asian background"),
                            ("P", "Any other Black background"),
                            ("S", "Any other ethnic group"),
                            ("G", "Any other mixed background"),
                            ("C", "Any other White background"),
                            ("K", "Bangladeshi or British Bangladeshi"),
                            ("A", "British, Mixed British"),
                            ("M", "Caribbean"),
                            ("R", "Chinese"),
                            ("H", "Indian or British Indian"),
                            ("B", "Irish"),
                            ("Z", "Not Stated"),
                            ("J", "Pakistani or British Pakistani"),
                            ("F", "Mixed (White and Asian)"),
                            ("E", "Mixed (White and Black African)"),
                            ("D", "Mixed (White and Black Caribbean)"),
                        ],
                        max_length=4,
                        null=True,
                    ),
                ),
                (
                    "index_of_multiple_deprivation_quintile",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="index of multiple deprivation calculated from MySociety data.",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Patient",
                "verbose_name_plural": "historical Patients",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalComorbidity",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "comorbidity_diagnosis_date",
                    models.DateField(
                        default=None,
                        help_text={
                            "label": "What is the date of diagnosis?",
                            "reference": "What is the date of diagnosis?",
                        },
                        max_length=50,
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Comorbidity",
                "verbose_name_plural": "historical Comorbidities",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalComorbidityList",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "conceptId",
                    models.CharField(blank=True, default=None, null=True, unique=True),
                ),
                ("term", models.CharField(blank=True, default=None, null=True)),
                (
                    "preferredTerm",
                    models.CharField(blank=True, default=None, null=True),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ComorbidityList",
                "verbose_name_plural": "historical ComorbidityLists",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalEpilepsy12User",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        help_text="Enter your first name",
                        max_length=150,
                        null=True,
                        verbose_name="First name",
                    ),
                ),
                (
                    "surname",
                    models.CharField(
                        blank=True,
                        help_text="Enter your surname",
                        max_length=150,
                        null=True,
                        verbose_name="Surname",
                    ),
                ),
                (
                    "title",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Mr"),
                            (2, "Mrs"),
                            (3, "Ms"),
                            (4, "Dr"),
                            (5, "Professor"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        error_messages={
                            "unique": "This email address is already in use."
                        },
                        help_text="Enter your email address.",
                        max_length=254,
                        verbose_name="Email address",
                    ),
                ),
                ("is_active", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                ("is_rcpch_audit_team_member", models.BooleanField(default=False)),
                ("is_rcpch_staff", models.BooleanField(default=False)),
                ("is_patient_or_carer", models.BooleanField(default=False)),
                (
                    "view_preference",
                    models.SmallIntegerField(
                        choices=[(0, "organisation"), (1, "trust"), (2, "national")],
                        default=0,
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "role",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Lead Clinician"),
                            (2, "Clinician"),
                            (3, "Administrator"),
                            (4, "RCPCH Audit Team"),
                            (7, "RCPCH Audit Children and Family"),
                        ],
                        null=True,
                    ),
                ),
                ("email_confirmed", models.BooleanField(default=False)),
                (
                    "password_last_set",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Epilepsy12 User",
                "verbose_name_plural": "historical Epilepsy12 Users",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalEpilepsyCause",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "conceptId",
                    models.CharField(blank=True, default=None, null=True, unique=True),
                ),
                ("term", models.CharField(blank=True, default=None, null=True)),
                (
                    "preferredTerm",
                    models.CharField(blank=True, default=None, null=True),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Epilepsy Cause",
                "verbose_name_plural": "historical Epilepsy Causes",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalEpilepsyContext",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "previous_febrile_seizure",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Uncertain")],
                        default=None,
                        help_text={
                            "label": "At any point in time has the child had febrile seizure(s)?",
                            "reference": "At any point in time has the child had febrile seizure(s)?",
                        },
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "previous_acute_symptomatic_seizure",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Uncertain")],
                        default=None,
                        help_text={
                            "label": "At any point in time has the child had acute symptomatic seizure(s)?",
                            "reference": "At any point in time has the child had acute symptomatic seizure(s)?",
                        },
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "is_there_a_family_history_of_epilepsy",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Uncertain")],
                        default=None,
                        help_text={
                            "label": "Is there a family history of epilepsy?",
                            "reference": "Is there a family history of epilepsy?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "previous_neonatal_seizures",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Uncertain")],
                        default=None,
                        help_text={
                            "label": "Were there seizures in the neonatal period?",
                            "reference": "Were there seizures in the neonatal period?",
                        },
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "diagnosis_of_epilepsy_withdrawn",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "Has the diagnosis of epilepsy been withdrawn?",
                            "reference": "In the first year after first assessment, has a diagnosis of epilepsy been withdrawn because it has been subsequently deemed incorrect?",
                        },
                        null=True,
                    ),
                ),
                (
                    "were_any_of_the_epileptic_seizures_convulsive",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "Were any of the epileptic seizures convulsive?",
                            "reference": "Were any of the epileptic seizures convulsive?",
                        },
                        null=True,
                    ),
                ),
                (
                    "experienced_prolonged_generalized_convulsive_seizures",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Uncertain")],
                        default=None,
                        help_text={
                            "label": "Has the child at any point in time experienced prolonged generalised seizures?",
                            "reference": "Has the child at any point in time experienced prolonged generalised convulsive seizures > 5 min duration (or successive continuing > 5min)?",
                        },
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "experienced_prolonged_focal_seizures",
                    models.CharField(
                        choices=[("Y", "Yes"), ("N", "No"), ("U", "Uncertain")],
                        default=None,
                        help_text={
                            "label": "Has the child at any point in time experienced prolonged focal seizures?",
                            "reference": "Has the child at any point in time experienced prolonged focal seizures > 5 min duration (or successive continuing > 5min)?",
                        },
                        max_length=2,
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Epilepsy Context",
                "verbose_name_plural": "historical Epilepsy Contexts",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalEpisode",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "expected_score",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
                (
                    "calculated_score",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
                (
                    "seizure_onset_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "When did the first episode of this type happen?",
                            "reference": "Date the first episode of this type occurred or was witnessed.",
                        },
                        null=True,
                    ),
                ),
                (
                    "seizure_onset_date_confidence",
                    models.CharField(
                        choices=[
                            ("Apx", "Approximate date"),
                            ("Exc", "Exact date"),
                            ("NK", "Not known"),
                        ],
                        default=None,
                        help_text={
                            "label": "Confidence in reported date of episode",
                            "reference": "How accurate is the date of this episode?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "episode_definition",
                    models.CharField(
                        choices=[
                            ("a", "This was a single episode"),
                            ("b", "This was a cluster within 24 hours"),
                            (
                                "c",
                                "These were 2 or more episodes more than 24 hours apart",
                            ),
                        ],
                        default=None,
                        help_text={
                            "label": "Episode definition",
                            "reference": "Episode definition. Part of case definition and defines if represents a cluster or discrete episodes.",
                        },
                        max_length=1,
                        null=True,
                        verbose_name="Episode definition. Part of case definition and defines if represents a cluster or discrete episodes.",
                    ),
                ),
                (
                    "has_description_of_the_episode_or_episodes_been_gathered",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "Has a description of the episode or episodes been gathered?",
                            "reference": "Has a description of the episode or episodes been gathered?",
                        },
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text={
                            "label": "What is the episode(s) like and is the description adequate?",
                            "reference": "Glossary of Descriptive Terminology for Ictal Semiology: Report of the ILAE Task Force on Classification and Terminology, 2002",
                        },
                        null=True,
                    ),
                ),
                (
                    "description_keywords",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            help_text="add a key word", max_length=500
                        ),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "epilepsy_or_nonepilepsy_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("E", "Epileptic"),
                            ("NE", "Non-epileptic"),
                            ("U", "Uncertain"),
                        ],
                        default=None,
                        help_text={
                            "label": "Is this episode epileptic, non-epileptic or uncertain?",
                            "reference": "Is this episode epileptic, non-epileptic or uncertain?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "epileptic_seizure_onset_type",
                    models.CharField(
                        choices=[
                            ("FO", "Focal onset"),
                            ("GO", "Generalised onset"),
                            ("UO", "Unknown onset"),
                            ("UC", "Unclassified"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best would describe the onset of the epileptic episode?",
                            "reference": "Operational classification of seizure types by the International League Against Epilepsy: Position Paper of the ILAE Commission for Classification and Terminology. Epilepsia, 58(4):522–530, 2017.",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "BPP",
                                "Behavioral Psychological And Psychiatric Disorders",
                            ),
                            ("MAD", "Migraine Associated Disorders"),
                            ("ME", "Miscellaneous Events"),
                            ("SRC", "Sleep Related Conditions"),
                            ("SAS", "Syncope And Anoxic Seizures"),
                            ("PMD", "Paroxysmal Movement Disorders"),
                            ("Oth", "Other"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the generalised nature of the nonepileptic episode(s)?",
                            "reference": "How best describes the generalised nature of the nonepileptic episode(s)?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "epileptic_generalised_onset",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("AEM", "Absence with eyelid myoclonia"),
                            ("Aab", "Atypical absence"),
                            ("Ato", "Atonic"),
                            ("Clo", "Clonic"),
                            ("EpS", "Epileptic spasms"),
                            ("MAb", "Myoclonic absence"),
                            ("MAt", "Myoclonic-atonic"),
                            ("MTC", "Myoclonic-tonic-clonic"),
                            ("MyC", "Myoclonic"),
                            ("Oth", "Other"),
                            ("TAb", "Typical absence"),
                            ("TCl", "Tonic-clonic"),
                            ("Ton", "Tonic"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the generalised nature of the epileptic episode(s)?",
                            "reference": "How best describes the generalised nature of the epileptic episode(s)?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "focal_onset_impaired_awareness",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_automatisms",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_atonic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_clonic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_left",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_right",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_epileptic_spasms",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_hyperkinetic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_myoclonic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_tonic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_autonomic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_behavioural_arrest",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_cognitive",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_emotional",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_sensory",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_centrotemporal",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_temporal",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_frontal",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_parietal",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_occipital",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_gelastic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "focal_onset_focal_to_bilateral_tonic_clonic",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
                (
                    "nonepileptic_seizure_unknown_onset",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("BAr", "Behaviour arrest"),
                            ("EpS", "Epileptic spasms"),
                            ("TCl", "Tonic-clonic"),
                            ("Oth", "Other"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the onset of the nonepileptic episode(s)?",
                            "reference": "Operational classification of seizure types by the International League Against Epilepsy: Position Paper of the ILAE Commission for Classification and Terminology. Epilepsia, 58(4):522–530, 2017.",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_syncope",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "Vasovagal syncope"),
                            ("b", "Reflex anoxic seizures"),
                            ("c", "Breath-holding attacks"),
                            ("d", "Hyperventilation syncope"),
                            ("e", "Compulsive valsalva"),
                            ("f", "Neurological syncope"),
                            ("g", "Imposed upper airways obstruction"),
                            ("h", "Orthostatic intolerance"),
                            ("i", "Long QT and cardiac syncope"),
                            ("j", "Hyper-cyanotic spells"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the <i>type</i> of syncope?",
                            "reference": "How best describes the <i>type</i> of syncope?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_behavioural",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "Daydreaming / Inattention"),
                            ("b", "Infantile gratification"),
                            ("c", "Eidetic imagery"),
                            ("d", "Tantrums and rage reactions"),
                            ("e", "Out of body experiences"),
                            ("f", "Panic attacks"),
                            ("g", "Dissociative states"),
                            ("h", "Non-epileptic seizures"),
                            ("i", "Hallucinations in psychiatric disorders"),
                            ("j", "Fabricated / factitious illness"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the <i>type</i> of behavioural episode?",
                            "reference": "How best describes the <i>type</i> of behavioural episode?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_sleep",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "Sleep related rhythmic movement disorders"),
                            ("b", "Hypnogogic jerks"),
                            ("c", "Parasomnias"),
                            ("d", "REM sleep disorders"),
                            ("e", "Benign neonatal sleep myoclonus"),
                            ("f", "Periodic leg movements"),
                            ("g", "Narcolepsy-cataplexy"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the <i>type</i> of sleep event?",
                            "reference": "How best describes the <i>type</i> of sleep event?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_paroxysmal",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "Tics"),
                            ("b", "Stereotypies"),
                            ("c", "Paroxysmal kinesigenic dyskinesia"),
                            ("d", "Paroxysmal nonkinesigenic dyskinesia"),
                            ("e", "Paroxysmal exercise induced dyskinesia"),
                            ("f", "Benign paroxysmal tonic upgaze"),
                            ("g", "Episodic ataxias"),
                            ("h", "Alternating hemiplegia"),
                            ("i", "Hyperekplexia"),
                            ("j", "Opsoclonus-myoclonus syndrome"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the <i>type</i> of paroxysmal event?",
                            "reference": "How best describes the <i>type</i> of paroxysmal event?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_migraine",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "Migraine with visual aura"),
                            ("b", "Familial hemiplegic migraine"),
                            ("c", "Benign paroxysmal torticollis"),
                            ("d", "Benign paroxysmal vertigo"),
                            ("e", "Cyclical vomiting"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the <i>type</i> of migraine?",
                            "reference": "How best describes the <i>type</i> of migraine?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_miscellaneous",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("a", "Benign myoclonus of infancy and shuddering attacks"),
                            ("b", "Jitteriness"),
                            ("c", "Sandifer syndrome"),
                            ("d", "Non-epileptic head drops"),
                            ("e", "Spasmus nutans"),
                            ("f", "Raised intracranial pressure"),
                            ("g", "Paroxysmal extreme pain disorder"),
                            ("h", "Spinal myoclonus"),
                        ],
                        default=None,
                        help_text={
                            "label": "How best describes the <i>subtype</i>?",
                            "reference": "How best describes the <i>subtype</i>?",
                        },
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "nonepileptic_seizure_other",
                    models.CharField(
                        blank=True, default=None, max_length=250, null=True
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Episode",
                "verbose_name_plural": "historical Episodes",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalFirstPaediatricAssessment",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "first_paediatric_assessment_in_acute_or_nonacute_setting",
                    models.IntegerField(
                        choices=[(1, "Acute"), (2, "Non-acute"), (3, "Don't know")],
                        default=None,
                        help_text={
                            "label": "Was the first paediatric assessment in an acute or nonacute setting?",
                            "reference": "Was the first paediatric assessment in an acute or nonacute setting?",
                        },
                        null=True,
                    ),
                ),
                (
                    "has_number_of_episodes_since_the_first_been_documented",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "The approximate frequency or number of episodes since the first episode",
                            "reference": "Has the approximate frequency or number of episodes since the first recorded episode been documented?",
                        },
                        null=True,
                    ),
                ),
                (
                    "general_examination_performed",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "General examination",
                            "reference": "has a general paediatric examination been performed?",
                        },
                        null=True,
                    ),
                ),
                (
                    "neurological_examination_performed",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "Neurological examination",
                            "reference": "Has a neurological examination been performed?",
                        },
                        null=True,
                    ),
                ),
                (
                    "developmental_learning_or_schooling_problems",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "Presence or absence of learning, developmental or educational difficulties",
                            "reference": "Has the presence or absence of developmental, learning or school-based problems been recorded?",
                        },
                        null=True,
                    ),
                ),
                (
                    "behavioural_or_emotional_problems",
                    models.BooleanField(
                        default=None,
                        help_text={
                            "label": "Presence or absence of emotional or behavioural problems",
                            "reference": "Has the presence or absence of emotional or behavioural problems been documented?",
                        },
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical First Paediatric Assessment",
                "verbose_name_plural": "historical First Paediatric Assessments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalInvestigations",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "eeg_indicated",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a first EEG been requested?",
                            "reference": "If a diagnosis of epilepsy is suspected, a routine EEG should be carried out to support the diagnosis. CYP undergoing initial investigations for epilepsy should have tests within 4 weeks of being requested.",
                        },
                        null=True,
                    ),
                ),
                (
                    "eeg_request_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date EEG requested",
                            "reference": "Date EEG requested. Even if the EEG was not performed, a request date is still required.",
                        },
                        null=True,
                    ),
                ),
                (
                    "eeg_performed_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date EEG performed",
                            "reference": "Date EEG performed",
                        },
                        null=True,
                    ),
                ),
                (
                    "twelve_lead_ecg_status",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a 12-Lead ECG been performed?",
                            "reference": "The Epilepsy12 standard is that all children with an convulsive episode should have a 12 lead ECG",
                        },
                        null=True,
                    ),
                ),
                (
                    "ct_head_scan_status",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a CT head been performed?",
                            "reference": "NICE states if MRI is contraindicated, consider a CT scan for children, young people and adults with epilepsy.",
                        },
                        null=True,
                    ),
                ),
                (
                    "mri_indicated",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a brain MRI been requested?",
                            "reference": "NICE recommends that an MRI scan should be offered to children, young people and adults diagnosed with epilepsy, unless they have idiopathic generalised epilepsy or self-limited epilepsy with centrotemporal spikes. The MRI should be carried out within 6 weeks of the MRI referral.",
                        },
                        null=True,
                    ),
                ),
                (
                    "mri_brain_requested_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "MRI brain requested date",
                            "reference": "MRI brain requested date",
                        },
                        null=True,
                    ),
                ),
                (
                    "mri_brain_reported_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date MRI brain reported",
                            "reference": "Date MRI brain reported",
                        },
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Investigations",
                "verbose_name_plural": "historical Investigations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalKeyword",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "keyword",
                    models.CharField(
                        help_text="A validated keyword for describing the semiology of a seizure",
                        max_length=100,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        help_text="The semiology category each keyword belongs to.",
                        max_length=100,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Keyword",
                "verbose_name_plural": "historical Keywords",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalManagement",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "has_an_aed_been_given",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has an antiseizure medicine been given?",
                            "reference": "Has an antiseizure medicine been given?",
                        },
                        null=True,
                    ),
                ),
                (
                    "has_rescue_medication_been_prescribed",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a rescue medicine been prescribed?",
                            "reference": "Has a rescue medicine been prescribed?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_in_place",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has care planning (either an individualised epilepsy document or copy clinic letter including care planning information) commenced?",
                            "reference": "Has care planning (either an individualised epilepsy document or copy clinic letter including care planning information) commenced?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "On what date was the individualised care plan put in place?",
                            "reference": "On what date was the individualised care plan put in place?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_has_parent_carer_child_agreement",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Parent or carer and child agreement",
                            "reference": "Has the parent or carer and child agreement to an individualised care plan been documented?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_includes_service_contact_details",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Service contact details",
                            "reference": "Does the individualised care plan include service contact details?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_include_first_aid",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "First aid advice",
                            "reference": "Does the individualised care plan include first aid advice?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_parental_prolonged_seizure_care",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Parental advice on managing prolonged seizures",
                            "reference": "Does the individualised care plan include parental advice on managing prolonged seizures?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_includes_general_participation_risk",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "General participation and risk assessment",
                            "reference": "Does the individualised care plan include general participation and risk assessment?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_addresses_water_safety",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Water safety",
                            "reference": "Does the individualised care plan address water safety?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_addresses_sudep",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Sudden unexpected death in epilepsy (SUDEP)",
                            "reference": "Does the individualised care plan address sudden unexpected death in epilepsy?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_includes_ehcp",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "An educational health care plan (EHCP)",
                            "reference": "Does the individualised care plan include an educational health care plan (EHCP)?",
                        },
                        null=True,
                    ),
                ),
                (
                    "has_individualised_care_plan_been_updated_in_the_last_year",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Being updated as necessary",
                            "reference": "Has the individualised care plan been updated in the last year?",
                        },
                        null=True,
                    ),
                ),
                (
                    "has_been_referred_for_mental_health_support",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a referral for mental health support been made?",
                            "reference": "Has the child been referred for support with their mental health?",
                        },
                        null=True,
                    ),
                ),
                (
                    "has_support_for_mental_health_support",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Is mental health support in place?",
                            "reference": "Is there evidence of the child receiving support for their mental health?",
                        },
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Management",
                "verbose_name_plural": "historical Management Plans",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalMedicine",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "medicine_name",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Medicine Name",
                            "reference": "Please enter the medicine.",
                        },
                        null=True,
                    ),
                ),
                (
                    "conceptId",
                    models.CharField(blank=True, default=None, null=True, unique=True),
                ),
                ("term", models.CharField(blank=True, default=None, null=True)),
                (
                    "preferredTerm",
                    models.CharField(blank=True, default=None, null=True),
                ),
                ("is_rescue", models.BooleanField(blank=True, default=None, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Medicine",
                "verbose_name_plural": "historical Medicines",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalMultiaxialDiagnosis",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "syndrome_present",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Is there an identifiable epilepsy syndrome?",
                            "reference": "Is there an identifiable epilepsy syndrome?",
                        },
                        null=True,
                    ),
                ),
                (
                    "epilepsy_cause_known",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a cause for the epilepsy been identified?",
                            "reference": "Has a cause for the epilepsy been identified?",
                        },
                        null=True,
                    ),
                ),
                (
                    "epilepsy_cause_categories",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=500),
                        blank=True,
                        default=list,
                        help_text={
                            "label": "Which category/categories best apply to this epilepsy?",
                            "reference": "Which category/categories best apply to this epilepsy?",
                        },
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "relevant_impairments_behavioural_educational",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Are there any relevant impairment, behavioural, educational or emotional problems?",
                            "reference": "Are there any relevant impairment, behavioural, educational or emotional problems?",
                        },
                        null=True,
                    ),
                ),
                (
                    "global_developmental_delay_or_learning_difficulties",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has global developmental delay (under 5 years) or learning disability/intellectual disability (over 5 years) been identified?",
                            "reference": "Has global developmental delay (under 5 years) or learning disability/intellectual disability (over 5 years) been identified?",
                        },
                        null=True,
                    ),
                ),
                (
                    "global_developmental_delay_or_learning_difficulties_severity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("mild", "Mild"),
                            ("moderate", "Moderate"),
                            ("severe", "Severe"),
                            ("profound", "Profound"),
                            ("uncertain", "Uncertain"),
                        ],
                        default=None,
                        help_text={
                            "label": "Add details on the severity of the neurodevelopmental condition.",
                            "reference": "Add details on the severity of the neurodevelopmental condition.",
                        },
                        null=True,
                    ),
                ),
                (
                    "autistic_spectrum_disorder",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has there been a diagnosis of autistic spectrum disorder?",
                            "reference": "Has there been a diagnosis of autistic spectrum disorder?",
                        },
                        null=True,
                    ),
                ),
                (
                    "mental_health_screen",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a mental health concern been sought?",
                            "reference": "Is there evidence of the child being assessed for mental health problems via clinical enquiry or the use of a screening questionnaire?",
                        },
                        null=True,
                    ),
                ),
                (
                    "mental_health_issue_identified",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a mental health issue been identified?",
                            "reference": "Does the child have any mental health issue identified?",
                        },
                        null=True,
                    ),
                ),
                (
                    "mental_health_issues",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=500),
                        blank=True,
                        default=list,
                        help_text={
                            "label": "Add details of any known mental health problem(s)",
                            "reference": "Add details of any known mental health problem(s)",
                        },
                        null=True,
                        size=None,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Multiaxial Diagnosis",
                "verbose_name_plural": "historical Multiaxial diagnosis assessments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalOrganisation",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "ods_code",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "website",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "address1",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "address2",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "address3",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "telephone",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "county",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("longitude", models.FloatField(blank=True, default=None, null=True)),
                (
                    "postcode",
                    models.CharField(
                        blank=True, default=None, max_length=10, null=True
                    ),
                ),
                (
                    "geocode_coordinates",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, default=None, null=True, srid=27700
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("published_at", models.DateField(blank=True, default=None, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Organisation",
                "verbose_name_plural": "historical Organisations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalRegistration",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "first_paediatric_assessment_date",
                    models.DateField(
                        default=None,
                        help_text={
                            "label": "First paediatric assessment",
                            "reference": "Setting this date is an irreversible step. Confirmation will be requested to complete this step.",
                        },
                        null=True,
                        validators=[epilepsy12.validators.not_in_the_future_validator],
                    ),
                ),
                (
                    "registration_close_date",
                    models.DateField(
                        default=None,
                        help_text={
                            "label": "First paediatric assessment closing date",
                            "reference": "Date on which the registration is due to close",
                        },
                        null=True,
                    ),
                ),
                (
                    "audit_submission_date",
                    models.DateField(
                        default=None,
                        help_text={
                            "label": "Epilepsy12 submission date",
                            "reference": "Date on which the audit submission is due. It is always on the 2nd Tuesday in January.",
                        },
                        null=True,
                    ),
                ),
                (
                    "eligibility_criteria_met",
                    models.BooleanField(default=None, null=True),
                ),
                ("cohort", models.PositiveSmallIntegerField(default=None, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Registration",
                "verbose_name_plural": "historical Registrations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSite",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "site_is_actively_involved_in_epilepsy_care",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "site_is_primary_centre_of_epilepsy_care",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "site_is_childrens_epilepsy_surgery_centre",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "site_is_paediatric_neurology_centre",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "site_is_general_paediatric_centre",
                    models.BooleanField(default=False, null=True),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Site",
                "verbose_name_plural": "historical Sites",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSyndrome",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "syndrome_diagnosis_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "The date the syndrome diagnosis was made.",
                            "reference": "The date the syndrome diagnosis was made.",
                        },
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Syndrome",
                "verbose_name_plural": "historical Syndromes",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSyndromeList",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "syndrome_name",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "The name of a given syndrome",
                            "reference": "The name of a given syndrome",
                        },
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical SyndromeList",
                "verbose_name_plural": "historical Syndrome Lists",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="IntegratedCareBoard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("boundary_identifier", models.CharField(max_length=9)),
                ("name", models.CharField(max_length=77)),
                ("bng_e", models.BigIntegerField()),
                ("bng_n", models.BigIntegerField()),
                ("long", models.FloatField()),
                ("lat", models.FloatField()),
                ("globalid", models.CharField(max_length=38)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(srid=27700),
                ),
                ("ods_code", models.CharField()),
                ("publication_date", models.DateField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Integrated Care Board",
                "verbose_name_plural": "Integrated Care Boards",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Investigations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "eeg_indicated",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a first EEG been requested?",
                            "reference": "If a diagnosis of epilepsy is suspected, a routine EEG should be carried out to support the diagnosis. CYP undergoing initial investigations for epilepsy should have tests within 4 weeks of being requested.",
                        },
                        null=True,
                    ),
                ),
                (
                    "eeg_request_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date EEG requested",
                            "reference": "Date EEG requested. Even if the EEG was not performed, a request date is still required.",
                        },
                        null=True,
                    ),
                ),
                (
                    "eeg_performed_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date EEG performed",
                            "reference": "Date EEG performed",
                        },
                        null=True,
                    ),
                ),
                (
                    "twelve_lead_ecg_status",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a 12-Lead ECG been performed?",
                            "reference": "The Epilepsy12 standard is that all children with an convulsive episode should have a 12 lead ECG",
                        },
                        null=True,
                    ),
                ),
                (
                    "ct_head_scan_status",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a CT head been performed?",
                            "reference": "NICE states if MRI is contraindicated, consider a CT scan for children, young people and adults with epilepsy.",
                        },
                        null=True,
                    ),
                ),
                (
                    "mri_indicated",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a brain MRI been requested?",
                            "reference": "NICE recommends that an MRI scan should be offered to children, young people and adults diagnosed with epilepsy, unless they have idiopathic generalised epilepsy or self-limited epilepsy with centrotemporal spikes. The MRI should be carried out within 6 weeks of the MRI referral.",
                        },
                        null=True,
                    ),
                ),
                (
                    "mri_brain_requested_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "MRI brain requested date",
                            "reference": "MRI brain requested date",
                        },
                        null=True,
                    ),
                ),
                (
                    "mri_brain_reported_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Date MRI brain reported",
                            "reference": "Date MRI brain reported",
                        },
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Investigations",
                "verbose_name_plural": "Investigations",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="Keyword",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "keyword",
                    models.CharField(
                        help_text="A validated keyword for describing the semiology of a seizure",
                        max_length=100,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        help_text="The semiology category each keyword belongs to.",
                        max_length=100,
                    ),
                ),
            ],
            options={
                "verbose_name": "Keyword",
                "verbose_name_plural": "Keywords",
            },
        ),
        migrations.CreateModel(
            name="KPI",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "paediatrician_with_expertise_in_epilepsies",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "1. Paediatrician with expertise in epilepsies",
                            "reference": "Percentage of children and young people with epilepsy, with input by a 'consultant paediatrician with expertise in epilepsies' within 2 weeks of initial referral",
                        },
                        null=True,
                    ),
                ),
                (
                    "epilepsy_specialist_nurse",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "2. Epilepsy Specialist Nurse",
                            "reference": "Percentage of children and young people with epilepsy, with input by epilepsy specialist nurse within the first year of care.",
                        },
                        null=True,
                    ),
                ),
                (
                    "tertiary_input",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "3. Tertiary input",
                            "reference": "Percentage of children and young people meeting defined criteria for paediatric neurology referral, with input of tertiary care and/or CESS referral within the first year of care.",
                        },
                        null=True,
                    ),
                ),
                (
                    "epilepsy_surgery_referral",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "3b. Epilepsy surgery referral",
                            "reference": "Percentage of ongoing children and young people meeting defined epilepsy surgery referral criteria with evidence of epilepsy surgery referral.",
                        },
                        null=True,
                    ),
                ),
                (
                    "ecg",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "4. ECG",
                            "reference": "Percentage of children and young people with convulsive seizures and epilepsy, with an ECG at first year.",
                        },
                        null=True,
                    ),
                ),
                (
                    "mri",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "5. MRI",
                            "reference": "Percentage of children and young people with defined indications for an MRI, who had timely MRI within 6 weeks of request",
                        },
                        null=True,
                    ),
                ),
                (
                    "assessment_of_mental_health_issues",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "6. Assessment of mental health issues",
                            "reference": "Percentage of children and young people with epilepsy where there is documented evidence that they have been asked about mental health either through clinical screening, or a questionnaire/measure.",
                        },
                        null=True,
                    ),
                ),
                (
                    "mental_health_support",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "7. Mental health support",
                            "reference": "Percentage of children and young people with epilepsy and a mental health problem who have evidence of mental health support",
                        },
                        null=True,
                    ),
                ),
                (
                    "sodium_valproate",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "8. Sodium Valproate",
                            "reference": "Percentage of all females 12 years and above currently on valproate treatment with annual risk acknowledgement form completed",
                        },
                        null=True,
                    ),
                ),
                (
                    "comprehensive_care_planning_agreement",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "9A. Comprehensive care planning agreement",
                            "reference": "Percentage of children and young people with epilepsy after 12 months where there is evidence of a comprehensive care plan that is agreed between the person, their family and/or carers and primary and secondary care providers, and the care plan has been updated where necessary.",
                        },
                        null=True,
                    ),
                ),
                (
                    "patient_held_individualised_epilepsy_document",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "i. Patient-held individualised epilepsy document/copy of clinic letter that includes care planning information",
                            "reference": "Percentage of children and young people with epilepsy after 12 months that had an individualised epilepsy document with individualised epilepsy document or a copy clinic letter that includes care planning information.",
                        },
                        null=True,
                    ),
                ),
                (
                    "patient_carer_parent_agreement_to_the_care_planning",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "ii. Patient/carer/parent agreement to the care planning",
                            "reference": "Percentage of children and young people with epilepsy after 12 months where there was evidence of agreement between the person, their family and/or carers as appropriate.",
                        },
                        null=True,
                    ),
                ),
                (
                    "care_planning_has_been_updated_when_necessary",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "iii. Care planning has been updated when necessary",
                            "reference": "Percentage of children and young people with epilepsy after 12 months where there is evidence that the care plan has been updated where necessary.",
                        },
                        null=True,
                    ),
                ),
                (
                    "comprehensive_care_planning_content",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "9B. Comprehensive care planning content",
                            "reference": "Percentage of children diagnosed with epilepsy with documented evidence of communication regarding core elements of care planning (items a - f).",
                        },
                        null=True,
                    ),
                ),
                (
                    "parental_prolonged_seizures_care_plan",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "i. Parental prolonged seizures care plan",
                            "reference": "Percentage of children and young people with epilepsy who have been prescribed rescue medication and have evidence of a written prolonged seizures plan.",
                        },
                        null=True,
                    ),
                ),
                (
                    "water_safety",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "ii. Water safety",
                            "reference": "Percentage of children and young people with epilepsy with evidence of discussion regarding water safety.",
                        },
                        null=True,
                    ),
                ),
                (
                    "first_aid",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "iii. First aid",
                            "reference": "Percentage of children and young people with epilepsy with evidence of discussion regarding first aid.",
                        },
                        null=True,
                    ),
                ),
                (
                    "general_participation_and_risk",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "iv. General participation and risk",
                            "reference": "Percentage of children and young people with epilepsy with evidence of discussion regarding general participation and risk.",
                        },
                        null=True,
                    ),
                ),
                (
                    "sudep",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "v. Sudden unexpected death in epilepsy",
                            "reference": "Percentage of children and young people with epilepsy with evidence of discussion regarding SUDEP (Sudden unexpected death in epilepsy) and evidence of a prolonged seizures care plan.",
                        },
                        null=True,
                    ),
                ),
                (
                    "service_contact_details",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "vi. Service contact details",
                            "reference": "Percentage of children and young people with epilepsy with evidence of being given service contact details.",
                        },
                        null=True,
                    ),
                ),
                (
                    "school_individual_healthcare_plan",
                    models.IntegerField(
                        default=None,
                        help_text={
                            "label": "10. School individualised health care plan",
                            "reference": "Percentage of children and young people with epilepsy aged 4 years and above with evidence of a school individual healthcare plan by 1 year after first paediatric assessment.",
                        },
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "KPI ",
                "verbose_name_plural": "KPIs",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="LocalHealthBoard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("boundary_identifier", models.CharField(max_length=9)),
                ("name", models.CharField(max_length=41)),
                ("welsh_name", models.CharField(max_length=40)),
                ("bng_e", models.FloatField()),
                ("bng_n", models.FloatField()),
                ("long", models.FloatField()),
                ("lat", models.FloatField()),
                ("globalid", models.CharField(max_length=38)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(srid=27700),
                ),
                ("ods_code", models.CharField(max_length=3)),
                ("publication_date", models.DateField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Local Health Board",
                "verbose_name_plural": "Local Health Boards",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="LondonBorough",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=22)),
                ("gss_code", models.CharField(max_length=9)),
                ("hectares", models.FloatField()),
                ("nonld_area", models.FloatField()),
                ("ons_inner", models.CharField(max_length=1)),
                ("sub_2009", models.CharField(max_length=7, null=True)),
                ("sub_2006", models.CharField(max_length=10, null=True)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(srid=27700),
                ),
            ],
            options={
                "verbose_name": "London Borough",
                "verbose_name_plural": "London Boroughs",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="MultiaxialDiagnosis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "syndrome_present",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Is there an identifiable epilepsy syndrome?",
                            "reference": "Is there an identifiable epilepsy syndrome?",
                        },
                        null=True,
                    ),
                ),
                (
                    "epilepsy_cause_known",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a cause for the epilepsy been identified?",
                            "reference": "Has a cause for the epilepsy been identified?",
                        },
                        null=True,
                    ),
                ),
                (
                    "epilepsy_cause_categories",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=500),
                        blank=True,
                        default=list,
                        help_text={
                            "label": "Which category/categories best apply to this epilepsy?",
                            "reference": "Which category/categories best apply to this epilepsy?",
                        },
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "relevant_impairments_behavioural_educational",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Are there any relevant impairment, behavioural, educational or emotional problems?",
                            "reference": "Are there any relevant impairment, behavioural, educational or emotional problems?",
                        },
                        null=True,
                    ),
                ),
                (
                    "global_developmental_delay_or_learning_difficulties",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has global developmental delay (under 5 years) or learning disability/intellectual disability (over 5 years) been identified?",
                            "reference": "Has global developmental delay (under 5 years) or learning disability/intellectual disability (over 5 years) been identified?",
                        },
                        null=True,
                    ),
                ),
                (
                    "global_developmental_delay_or_learning_difficulties_severity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("mild", "Mild"),
                            ("moderate", "Moderate"),
                            ("severe", "Severe"),
                            ("profound", "Profound"),
                            ("uncertain", "Uncertain"),
                        ],
                        default=None,
                        help_text={
                            "label": "Add details on the severity of the neurodevelopmental condition.",
                            "reference": "Add details on the severity of the neurodevelopmental condition.",
                        },
                        null=True,
                    ),
                ),
                (
                    "autistic_spectrum_disorder",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has there been a diagnosis of autistic spectrum disorder?",
                            "reference": "Has there been a diagnosis of autistic spectrum disorder?",
                        },
                        null=True,
                    ),
                ),
                (
                    "mental_health_screen",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a mental health concern been sought?",
                            "reference": "Is there evidence of the child being assessed for mental health problems via clinical enquiry or the use of a screening questionnaire?",
                        },
                        null=True,
                    ),
                ),
                (
                    "mental_health_issue_identified",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a mental health issue been identified?",
                            "reference": "Does the child have any mental health issue identified?",
                        },
                        null=True,
                    ),
                ),
                (
                    "mental_health_issues",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=500),
                        blank=True,
                        default=list,
                        help_text={
                            "label": "Add details of any known mental health problem(s)",
                            "reference": "Add details of any known mental health problem(s)",
                        },
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record created by user in %(class)",
                    ),
                ),
                (
                    "epilepsy_cause",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "What is the main identified cause of the epilepsy?",
                            "reference": "What is the main identified cause of the epilepsy?",
                        },
                        max_length=250,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="epilepsy12.epilepsycause",
                    ),
                ),
            ],
            options={
                "verbose_name": "Multiaxial Diagnosis",
                "verbose_name_plural": "Multiaxial diagnosis assessments",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="NHSEnglandRegion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("boundary_identifier", models.CharField(max_length=9)),
                ("name", models.CharField(max_length=24)),
                ("bng_e", models.BigIntegerField()),
                ("bng_n", models.BigIntegerField()),
                ("long", models.FloatField()),
                ("lat", models.FloatField()),
                ("globalid", models.CharField(max_length=38)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(srid=27700),
                ),
                ("region_code", models.CharField(blank=True, null=True, unique=True)),
                ("publication_date", models.DateField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "NHS England Region",
                "verbose_name_plural": "NHS England Regions",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="OPENUKNetwork",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField()),
                ("boundary_identifier", models.CharField(unique=True)),
                ("country", models.CharField()),
                ("publication_date", models.DateField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record created by user in %(class)",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record updated by user in %(class)",
                    ),
                ),
            ],
            options={
                "verbose_name": "OPENUK Network",
                "verbose_name_plural": "OPENUK Networks",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Organisation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "ods_code",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "website",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "address1",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "address2",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "address3",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "telephone",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "county",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("longitude", models.FloatField(blank=True, default=None, null=True)),
                (
                    "postcode",
                    models.CharField(
                        blank=True, default=None, max_length=10, null=True
                    ),
                ),
                (
                    "geocode_coordinates",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, default=None, null=True, srid=27700
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("published_at", models.DateField(blank=True, default=None, null=True)),
                (
                    "country",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="epilepsy12.country",
                    ),
                ),
                (
                    "integrated_care_board",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="epilepsy12.integratedcareboard",
                    ),
                ),
                (
                    "local_health_board",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="epilepsy12.localhealthboard",
                    ),
                ),
                (
                    "london_borough",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="epilepsy12.londonborough",
                    ),
                ),
                (
                    "nhs_england_region",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="epilepsy12.nhsenglandregion",
                    ),
                ),
                (
                    "openuk_network",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="epilepsy12.openuknetwork",
                    ),
                ),
            ],
            options={
                "verbose_name": "Organisation",
                "verbose_name_plural": "Organisations",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="CountryKPIAggregation",
            fields=[
                (
                    "basekpimetrics_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="epilepsy12.basekpimetrics",
                    ),
                ),
                (
                    "abstraction_name",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("open_access", models.BooleanField(default=False)),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True, help_text={"label": "", "reference": ""}
                    ),
                ),
                ("cohort", models.PositiveSmallIntegerField(default=None)),
                ("final_publication", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Country KPI Aggregation Model",
                "verbose_name_plural": "Country KPI Aggregation Models",
            },
            bases=(
                "epilepsy12.basekpimetrics",
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="ICBKPIAggregation",
            fields=[
                (
                    "basekpimetrics_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="epilepsy12.basekpimetrics",
                    ),
                ),
                (
                    "abstraction_name",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("open_access", models.BooleanField(default=False)),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True, help_text={"label": "", "reference": ""}
                    ),
                ),
                ("cohort", models.PositiveSmallIntegerField(default=None)),
                ("final_publication", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "IntegratedCareBoard KPI Aggregation Model",
                "verbose_name_plural": "IntegratedCareBoard KPI Aggregation Models",
            },
            bases=(
                "epilepsy12.basekpimetrics",
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="LocalHealthBoardKPIAggregation",
            fields=[
                (
                    "basekpimetrics_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="epilepsy12.basekpimetrics",
                    ),
                ),
                (
                    "abstraction_name",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("open_access", models.BooleanField(default=False)),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True, help_text={"label": "", "reference": ""}
                    ),
                ),
                ("cohort", models.PositiveSmallIntegerField(default=None)),
                ("final_publication", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Local Health Board KPI Aggregation Model",
                "verbose_name_plural": "Local Health Board KPI Aggregation Models",
            },
            bases=(
                "epilepsy12.basekpimetrics",
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="NationalKPIAggregation",
            fields=[
                (
                    "basekpimetrics_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="epilepsy12.basekpimetrics",
                    ),
                ),
                (
                    "abstraction_name",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("open_access", models.BooleanField(default=False)),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True, help_text={"label": "", "reference": ""}
                    ),
                ),
                ("final_publication", models.BooleanField(default=False)),
                ("cohort", models.PositiveSmallIntegerField(unique=True)),
            ],
            options={
                "verbose_name": "National KPI Aggregation Model",
                "verbose_name_plural": "National KPI Aggregation Models",
            },
            bases=(
                "epilepsy12.basekpimetrics",
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="NHSEnglandRegionKPIAggregation",
            fields=[
                (
                    "basekpimetrics_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="epilepsy12.basekpimetrics",
                    ),
                ),
                (
                    "abstraction_name",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("open_access", models.BooleanField(default=False)),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True, help_text={"label": "", "reference": ""}
                    ),
                ),
                ("cohort", models.PositiveSmallIntegerField(default=None)),
                ("final_publication", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "NHSEnglandRegion KPI Aggregation Model",
                "verbose_name_plural": "NHSEnglandRegion KPI Aggregation Models",
            },
            bases=(
                "epilepsy12.basekpimetrics",
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="OpenUKKPIAggregation",
            fields=[
                (
                    "basekpimetrics_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="epilepsy12.basekpimetrics",
                    ),
                ),
                (
                    "abstraction_name",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("open_access", models.BooleanField(default=False)),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True, help_text={"label": "", "reference": ""}
                    ),
                ),
                ("cohort", models.PositiveSmallIntegerField(default=None)),
                ("final_publication", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "OpenUK KPI Aggregation Model",
                "verbose_name_plural": "OpenUK KPI Aggregation Models",
            },
            bases=(
                "epilepsy12.basekpimetrics",
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="OrganisationKPIAggregation",
            fields=[
                (
                    "basekpimetrics_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="epilepsy12.basekpimetrics",
                    ),
                ),
                (
                    "abstraction_name",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("open_access", models.BooleanField(default=False)),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True, help_text={"label": "", "reference": ""}
                    ),
                ),
                ("cohort", models.PositiveSmallIntegerField(default=None)),
                ("final_publication", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Organisation KPI Aggregation Model",
                "verbose_name_plural": "Organisation KPI Aggregation Models",
            },
            bases=(
                "epilepsy12.basekpimetrics",
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="TrustKPIAggregation",
            fields=[
                (
                    "basekpimetrics_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="epilepsy12.basekpimetrics",
                    ),
                ),
                (
                    "abstraction_name",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("open_access", models.BooleanField(default=False)),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True, help_text={"label": "", "reference": ""}
                    ),
                ),
                ("cohort", models.PositiveSmallIntegerField(default=None)),
                ("final_publication", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Trust KPI Aggregation Model",
                "verbose_name_plural": "Trust KPI Aggregation Models",
            },
            bases=(
                "epilepsy12.basekpimetrics",
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="VisitActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activity_datetime",
                    models.DateTimeField(
                        auto_created=True, default=django.utils.timezone.now
                    ),
                ),
                (
                    "activity",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "SUCCESSFUL_LOGIN"),
                            (2, "UNSUCCESSFUL_LOGIN"),
                            (3, "LOGOUT"),
                        ],
                        default=1,
                    ),
                ),
                ("ip_address", models.CharField(blank=True, max_length=250, null=True)),
                (
                    "epilepsy12user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "VisitActivity",
                "verbose_name_plural": "VisitActivities",
                "ordering": ("activity_datetime",),
            },
        ),
        migrations.CreateModel(
            name="Trust",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("ods_code", models.CharField(max_length=3, unique=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "address_line_1",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("address_line_2", models.CharField(blank=True, max_length=100)),
                (
                    "town",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "postcode",
                    models.CharField(
                        blank=True, default=None, max_length=10, null=True
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True, default=None, max_length=50, null=True
                    ),
                ),
                (
                    "telephone",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "website",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("published_at", models.DateField(blank=True, default=None, null=True)),
            ],
            options={
                "verbose_name": "Trust",
                "verbose_name_plural": "Trusts",
                "ordering": ("name",),
                "indexes": [
                    models.Index(
                        fields=["ods_code"], name="epilepsy12__ods_cod_85ef0a_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="SyndromeList",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "syndrome_name",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "The name of a given syndrome",
                            "reference": "The name of a given syndrome",
                        },
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record created by user in %(class)",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record updated by user in %(class)",
                    ),
                ),
            ],
            options={
                "verbose_name": "SyndromeList",
                "verbose_name_plural": "Syndrome Lists",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="Syndrome",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "syndrome_diagnosis_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "The date the syndrome diagnosis was made.",
                            "reference": "The date the syndrome diagnosis was made.",
                        },
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record created by user in %(class)",
                    ),
                ),
                (
                    "multiaxial_diagnosis",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="syndromes",
                        to="epilepsy12.multiaxialdiagnosis",
                    ),
                ),
                (
                    "syndrome",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "The syndrome name.",
                            "reference": "Methodology for classification and definition of epilepsy syndromes with list of syndromes: Report of the ILAE Task Force on Nosology and Definitions, Epilepsia 2017",
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="epilepsy12.syndromelist",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record updated by user in %(class)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Syndrome",
                "verbose_name_plural": "Syndromes",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "site_is_actively_involved_in_epilepsy_care",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "site_is_primary_centre_of_epilepsy_care",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "site_is_childrens_epilepsy_surgery_centre",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "site_is_paediatric_neurology_centre",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "site_is_general_paediatric_centre",
                    models.BooleanField(default=False, null=True),
                ),
                (
                    "case",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="site",
                        to="epilepsy12.case",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record created by user in %(class)",
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="site",
                        to="epilepsy12.organisation",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record updated by user in %(class)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Site",
                "verbose_name_plural": "Sites",
                "permissions": [
                    (
                        "can_allocate_epilepsy12_lead_centre",
                        "Can allocate this child to any Epilepsy12 centre.",
                    ),
                    (
                        "can_transfer_epilepsy12_lead_centre",
                        "Can transfer this child to another Epilepsy12 centre.",
                    ),
                    (
                        "can_edit_epilepsy12_lead_centre",
                        "Can edit this child's current Epilepsy12 lead centre.",
                    ),
                    (
                        "can_delete_epilepsy12_lead_centre",
                        "Can delete Epilepsy12 lead centre.",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Registration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "first_paediatric_assessment_date",
                    models.DateField(
                        default=None,
                        help_text={
                            "label": "First paediatric assessment",
                            "reference": "Setting this date is an irreversible step. Confirmation will be requested to complete this step.",
                        },
                        null=True,
                        validators=[epilepsy12.validators.not_in_the_future_validator],
                    ),
                ),
                (
                    "registration_close_date",
                    models.DateField(
                        default=None,
                        help_text={
                            "label": "First paediatric assessment closing date",
                            "reference": "Date on which the registration is due to close",
                        },
                        null=True,
                    ),
                ),
                (
                    "audit_submission_date",
                    models.DateField(
                        default=None,
                        help_text={
                            "label": "Epilepsy12 submission date",
                            "reference": "Date on which the audit submission is due. It is always on the 2nd Tuesday in January.",
                        },
                        null=True,
                    ),
                ),
                (
                    "eligibility_criteria_met",
                    models.BooleanField(default=None, null=True),
                ),
                ("cohort", models.PositiveSmallIntegerField(default=None, null=True)),
                (
                    "audit_progress",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="epilepsy12.auditprogress",
                    ),
                ),
                (
                    "case",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="epilepsy12.case",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record created by user in %(class)",
                    ),
                ),
                (
                    "kpi",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="epilepsy12.kpi",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record updated by user in %(class)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Registration",
                "verbose_name_plural": "Registrations",
                "permissions": [
                    (
                        "can_approve_eligibility",
                        "Can approve eligibility for Epilepsy12.",
                    ),
                    (
                        "can_register_child_in_epilepsy12",
                        "Can register child in Epilepsy12. (A cohort number is automatically allocaeted)",
                    ),
                    (
                        "can_unregister_child_in_epilepsy12",
                        "Can unregister a child in Epilepsy. Their record and previously entered data is untouched.",
                    ),
                    (
                        "can_consent_to_audit_participation",
                        "Can consent to participating in Epilepsy12.",
                    ),
                ],
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.AddField(
            model_name="organisation",
            name="trust",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="epilepsy12.trust",
            ),
        ),
        migrations.AddField(
            model_name="multiaxialdiagnosis",
            name="registration",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="multiaxialdiagnosis",
                to="epilepsy12.registration",
            ),
        ),
        migrations.AddField(
            model_name="multiaxialdiagnosis",
            name="updated_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="updated_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.CreateModel(
            name="Medicine",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "medicine_name",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Medicine Name",
                            "reference": "Please enter the medicine.",
                        },
                        null=True,
                    ),
                ),
                (
                    "conceptId",
                    models.CharField(blank=True, default=None, null=True, unique=True),
                ),
                ("term", models.CharField(blank=True, default=None, null=True)),
                (
                    "preferredTerm",
                    models.CharField(blank=True, default=None, null=True),
                ),
                ("is_rescue", models.BooleanField(blank=True, default=None, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record created by user in %(class)",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record updated by user in %(class)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Medicine",
                "verbose_name_plural": "Medicines",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.CreateModel(
            name="Management",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "has_an_aed_been_given",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has an antiseizure medicine been given?",
                            "reference": "Has an antiseizure medicine been given?",
                        },
                        null=True,
                    ),
                ),
                (
                    "has_rescue_medication_been_prescribed",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a rescue medicine been prescribed?",
                            "reference": "Has a rescue medicine been prescribed?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_in_place",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has care planning (either an individualised epilepsy document or copy clinic letter including care planning information) commenced?",
                            "reference": "Has care planning (either an individualised epilepsy document or copy clinic letter including care planning information) commenced?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_date",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "On what date was the individualised care plan put in place?",
                            "reference": "On what date was the individualised care plan put in place?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_has_parent_carer_child_agreement",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Parent or carer and child agreement",
                            "reference": "Has the parent or carer and child agreement to an individualised care plan been documented?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_includes_service_contact_details",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Service contact details",
                            "reference": "Does the individualised care plan include service contact details?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_include_first_aid",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "First aid advice",
                            "reference": "Does the individualised care plan include first aid advice?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_parental_prolonged_seizure_care",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Parental advice on managing prolonged seizures",
                            "reference": "Does the individualised care plan include parental advice on managing prolonged seizures?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_includes_general_participation_risk",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "General participation and risk assessment",
                            "reference": "Does the individualised care plan include general participation and risk assessment?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_addresses_water_safety",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Water safety",
                            "reference": "Does the individualised care plan address water safety?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_addresses_sudep",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Sudden unexpected death in epilepsy (SUDEP)",
                            "reference": "Does the individualised care plan address sudden unexpected death in epilepsy?",
                        },
                        null=True,
                    ),
                ),
                (
                    "individualised_care_plan_includes_ehcp",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "An educational health care plan (EHCP)",
                            "reference": "Does the individualised care plan include an educational health care plan (EHCP)?",
                        },
                        null=True,
                    ),
                ),
                (
                    "has_individualised_care_plan_been_updated_in_the_last_year",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Being updated as necessary",
                            "reference": "Has the individualised care plan been updated in the last year?",
                        },
                        null=True,
                    ),
                ),
                (
                    "has_been_referred_for_mental_health_support",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Has a referral for mental health support been made?",
                            "reference": "Has the child been referred for support with their mental health?",
                        },
                        null=True,
                    ),
                ),
                (
                    "has_support_for_mental_health_support",
                    models.BooleanField(
                        blank=True,
                        default=None,
                        help_text={
                            "label": "Is mental health support in place?",
                            "reference": "Is there evidence of the child receiving support for their mental health?",
                        },
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record created by user in %(class)",
                    ),
                ),
                (
                    "registration",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="epilepsy12.registration",
                        verbose_name="related registration",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record updated by user in %(class)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Management",
                "verbose_name_plural": "Management Plans",
            },
            bases=(
                models.Model,
                epilepsy12.models_folder.help_text_mixin.HelpTextMixin,
            ),
        ),
        migrations.AddIndex(
            model_name="londonborough",
            index=models.Index(
                fields=["gss_code"], name="epilepsy12__gss_cod_97a916_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="localhealthboard",
            index=models.Index(
                fields=["ods_code"], name="epilepsy12__ods_cod_fdfded_idx"
            ),
        ),
        migrations.AddField(
            model_name="kpi",
            name="organisation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="epilepsy12.organisation",
            ),
        ),
        migrations.AddField(
            model_name="investigations",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="investigations",
            name="registration",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="epilepsy12.registration",
                verbose_name="Related Registration",
            ),
        ),
        migrations.AddField(
            model_name="investigations",
            name="updated_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="updated_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalsyndromelist",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalsyndromelist",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalsyndromelist",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalsyndrome",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalsyndrome",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalsyndrome",
            name="multiaxial_diagnosis",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.multiaxialdiagnosis",
            ),
        ),
        migrations.AddField(
            model_name="historicalsyndrome",
            name="syndrome",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                default=None,
                help_text={
                    "label": "The syndrome name.",
                    "reference": "Methodology for classification and definition of epilepsy syndromes with list of syndromes: Report of the ILAE Task Force on Nosology and Definitions, Epilepsia 2017",
                },
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.syndromelist",
            ),
        ),
        migrations.AddField(
            model_name="historicalsyndrome",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalsite",
            name="case",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.case",
            ),
        ),
        migrations.AddField(
            model_name="historicalsite",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalsite",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalsite",
            name="organisation",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.organisation",
            ),
        ),
        migrations.AddField(
            model_name="historicalsite",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalregistration",
            name="audit_progress",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.auditprogress",
            ),
        ),
        migrations.AddField(
            model_name="historicalregistration",
            name="case",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.case",
            ),
        ),
        migrations.AddField(
            model_name="historicalregistration",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalregistration",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalregistration",
            name="kpi",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.kpi",
            ),
        ),
        migrations.AddField(
            model_name="historicalregistration",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalorganisation",
            name="country",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.country",
            ),
        ),
        migrations.AddField(
            model_name="historicalorganisation",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalorganisation",
            name="integrated_care_board",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.integratedcareboard",
            ),
        ),
        migrations.AddField(
            model_name="historicalorganisation",
            name="local_health_board",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.localhealthboard",
            ),
        ),
        migrations.AddField(
            model_name="historicalorganisation",
            name="london_borough",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.londonborough",
            ),
        ),
        migrations.AddField(
            model_name="historicalorganisation",
            name="nhs_england_region",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.nhsenglandregion",
            ),
        ),
        migrations.AddField(
            model_name="historicalorganisation",
            name="openuk_network",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.openuknetwork",
            ),
        ),
        migrations.AddField(
            model_name="historicalorganisation",
            name="trust",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.trust",
            ),
        ),
        migrations.AddField(
            model_name="historicalmultiaxialdiagnosis",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalmultiaxialdiagnosis",
            name="epilepsy_cause",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                default=None,
                help_text={
                    "label": "What is the main identified cause of the epilepsy?",
                    "reference": "What is the main identified cause of the epilepsy?",
                },
                max_length=250,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.epilepsycause",
            ),
        ),
        migrations.AddField(
            model_name="historicalmultiaxialdiagnosis",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalmultiaxialdiagnosis",
            name="registration",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.registration",
            ),
        ),
        migrations.AddField(
            model_name="historicalmultiaxialdiagnosis",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalmedicine",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalmedicine",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalmedicine",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalmanagement",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalmanagement",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalmanagement",
            name="registration",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.registration",
                verbose_name="related registration",
            ),
        ),
        migrations.AddField(
            model_name="historicalmanagement",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalkeyword",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalinvestigations",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalinvestigations",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalinvestigations",
            name="registration",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.registration",
                verbose_name="Related Registration",
            ),
        ),
        migrations.AddField(
            model_name="historicalinvestigations",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalfirstpaediatricassessment",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalfirstpaediatricassessment",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalfirstpaediatricassessment",
            name="registration",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.registration",
                verbose_name="Related Registration",
            ),
        ),
        migrations.AddField(
            model_name="historicalfirstpaediatricassessment",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalepisode",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalepisode",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalepisode",
            name="multiaxial_diagnosis",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.multiaxialdiagnosis",
            ),
        ),
        migrations.AddField(
            model_name="historicalepisode",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalepilepsycontext",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalepilepsycontext",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalepilepsycontext",
            name="registration",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.registration",
            ),
        ),
        migrations.AddField(
            model_name="historicalepilepsycontext",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalepilepsycause",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalepilepsycause",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalepilepsycause",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalepilepsy12user",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalepilepsy12user",
            name="organisation_employer",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.organisation",
            ),
        ),
        migrations.AddField(
            model_name="historicalcomorbiditylist",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalcomorbiditylist",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalcomorbiditylist",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalcomorbidity",
            name="comorbidityentity",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                default=None,
                help_text={
                    "label": "What is the comorbidity?",
                    "reference": "Paediatric neurodisability outpatient diagnosis simple reference set (999001751000000105), SNOMED-CT",
                },
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.comorbiditylist",
            ),
        ),
        migrations.AddField(
            model_name="historicalcomorbidity",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalcomorbidity",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalcomorbidity",
            name="multiaxial_diagnosis",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.multiaxialdiagnosis",
            ),
        ),
        migrations.AddField(
            model_name="historicalcomorbidity",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalcase",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalcase",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalcase",
            name="locked_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="locked by",
            ),
        ),
        migrations.AddField(
            model_name="historicalcase",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalassessment",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalassessment",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalassessment",
            name="registration",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.registration",
                verbose_name="related registration",
            ),
        ),
        migrations.AddField(
            model_name="historicalassessment",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalantiepilepsymedicine",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="historicalantiepilepsymedicine",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalantiepilepsymedicine",
            name="management",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.management",
                verbose_name="related management",
            ),
        ),
        migrations.AddField(
            model_name="historicalantiepilepsymedicine",
            name="medicine_entity",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                default=None,
                help_text={
                    "label": "Medicine Name",
                    "reference": "Please enter the medicine.",
                },
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="epilepsy12.medicine",
            ),
        ),
        migrations.AddField(
            model_name="historicalantiepilepsymedicine",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="firstpaediatricassessment",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="firstpaediatricassessment",
            name="registration",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                to="epilepsy12.registration",
                verbose_name="Related Registration",
            ),
        ),
        migrations.AddField(
            model_name="firstpaediatricassessment",
            name="updated_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="updated_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="episode",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="episode",
            name="multiaxial_diagnosis",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="episodes",
                to="epilepsy12.multiaxialdiagnosis",
            ),
        ),
        migrations.AddField(
            model_name="episode",
            name="updated_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="updated_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="epilepsycontext",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="epilepsycontext",
            name="registration",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="epilepsy12.registration",
            ),
        ),
        migrations.AddField(
            model_name="epilepsycontext",
            name="updated_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="updated_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="epilepsycause",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="epilepsycause",
            name="updated_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="updated_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddIndex(
            model_name="country",
            index=models.Index(
                fields=["boundary_identifier"], name="epilepsy12__boundar_0b39ff_idx"
            ),
        ),
        migrations.AddField(
            model_name="comorbiditylist",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="comorbiditylist",
            name="updated_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="updated_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="comorbidity",
            name="comorbidityentity",
            field=models.ForeignKey(
                default=None,
                help_text={
                    "label": "What is the comorbidity?",
                    "reference": "Paediatric neurodisability outpatient diagnosis simple reference set (999001751000000105), SNOMED-CT",
                },
                on_delete=django.db.models.deletion.PROTECT,
                to="epilepsy12.comorbiditylist",
            ),
        ),
        migrations.AddField(
            model_name="comorbidity",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="comorbidity",
            name="multiaxial_diagnosis",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comorbidities",
                to="epilepsy12.multiaxialdiagnosis",
            ),
        ),
        migrations.AddField(
            model_name="comorbidity",
            name="updated_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="updated_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="case",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="case",
            name="locked_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
                verbose_name="locked by",
            ),
        ),
        migrations.AddField(
            model_name="case",
            name="organisations",
            field=models.ManyToManyField(
                related_name="cases",
                through="epilepsy12.Site",
                to="epilepsy12.organisation",
            ),
        ),
        migrations.AddField(
            model_name="case",
            name="updated_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="updated_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="registration",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                to="epilepsy12.registration",
                verbose_name="related registration",
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="updated_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="updated_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="antiepilepsymedicine",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record created by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="antiepilepsymedicine",
            name="management",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="epilepsy12.management",
                verbose_name="related management",
            ),
        ),
        migrations.AddField(
            model_name="antiepilepsymedicine",
            name="medicine_entity",
            field=models.ForeignKey(
                default=None,
                help_text={
                    "label": "Medicine Name",
                    "reference": "Please enter the medicine.",
                },
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="epilepsy12.medicine",
            ),
        ),
        migrations.AddField(
            model_name="antiepilepsymedicine",
            name="updated_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="updated_%(class)s",
                to=settings.AUTH_USER_MODEL,
                verbose_name="record updated by user in %(class)",
            ),
        ),
        migrations.AddField(
            model_name="epilepsy12user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="epilepsy12user",
            name="organisation_employer",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="epilepsy12.organisation",
            ),
        ),
        migrations.AddField(
            model_name="epilepsy12user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddIndex(
            model_name="visitactivity",
            index=models.Index(
                fields=["activity_datetime"], name="epilepsy12__activit_9d37f2_idx"
            ),
        ),
        migrations.AddField(
            model_name="trustkpiaggregation",
            name="abstraction_relation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="epilepsy12.trust"
            ),
        ),
        migrations.AddField(
            model_name="organisationkpiaggregation",
            name="abstraction_relation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                to="epilepsy12.organisation",
            ),
        ),
        migrations.AddIndex(
            model_name="organisation",
            index=models.Index(fields=["name"], name="epilepsy12__name_0d141e_idx"),
        ),
        migrations.AddField(
            model_name="openukkpiaggregation",
            name="abstraction_relation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                to="epilepsy12.openuknetwork",
            ),
        ),
        migrations.AddField(
            model_name="nhsenglandregionkpiaggregation",
            name="abstraction_relation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                to="epilepsy12.nhsenglandregion",
            ),
        ),
        migrations.AddField(
            model_name="localhealthboardkpiaggregation",
            name="abstraction_relation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                to="epilepsy12.localhealthboard",
            ),
        ),
        migrations.AddField(
            model_name="icbkpiaggregation",
            name="abstraction_relation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                to="epilepsy12.integratedcareboard",
            ),
        ),
        migrations.AddField(
            model_name="countrykpiaggregation",
            name="abstraction_relation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="epilepsy12.country"
            ),
        ),
        migrations.AddConstraint(
            model_name="epilepsy12user",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("email"),
                name="user_email_ci_uniqueness",
            ),
        ),
    ]
