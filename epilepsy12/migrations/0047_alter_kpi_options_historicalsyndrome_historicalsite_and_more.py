# Generated by Django 4.1.5 on 2023-01-21 18:43

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        ('epilepsy12', '0046_alter_kpi_parent_trust'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='kpi',
            options={'verbose_name': 'KPI ', 'verbose_name_plural': 'KPIs'},
        ),
        migrations.CreateModel(
            name='HistoricalSyndrome',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('syndrome_diagnosis_date', models.DateField(blank=True, default=None, help_text={'label': 'The date the syndrome diagnosis was made.', 'reference': 'The date the syndrome diagnosis was made.'}, null=True)),
                ('syndrome_name', models.IntegerField(blank=True, choices=[(27, 'CDKL5-DEE'), (16, 'Childhood absence epilepsy'), (5, 'Childhood occipital visual epilepsy'), (34, 'DEE or EE with spike-and-wave activation in sleep'), (23, 'Dravet syndrome'), (20, 'Early infantile DEE'), (21, 'Epilepsy of infancy with migrating focal seizures'), (11, 'Epilepsy with auditory features'), (15, 'Epilepsy with eyelid myoclonia'), (19, 'Epilepsy with generalized tonic–clonic seizures alone'), (14, 'Epilepsy with myoclonic absences'), (32, 'Epilepsy with myoclonic–atonic seizures'), (39, 'Epilepsy with reading-induced seizures'), (24, 'Etiology-specific DEEs'), (10, 'Familial focal epilepsy with variable foci'), (8, 'Familial mesial temporal lobe epilepsy'), (35, 'Febrile infection-related epilepsy syndrome'), (29, 'GLUT1DS-DEE'), (31, 'Gelastic seizures with HH'), (12, 'Genetic epilepsy with febrile seizures plus'), (36, 'Hemiconvulsion–hemiplegia–epilepsy'), (22, 'Infantile epileptic spasms syndrome'), (17, 'Juvenile absence epilepsy'), (18, 'Juvenile myoclonic epilepsy'), (25, 'KCNQ2-DEE'), (33, 'Lennox–Gastaut syndrome'), (7, 'Mesial temporal lobe epilepsy with hippocampal sclerosis'), (13, 'Myoclonic epilepsy in infancy'), (28, 'PCDH19 clustering epilepsy'), (6, 'Photosensitive occipital lobe epilepsy'), (38, 'Progressive myoclonus epilepsies'), (26, 'Pyridoxine-dependent and pyridox(am)ine 5′ phosphate deficiency DEE'), (37, 'Rasmussen syndrome'), (1, 'Self-limited (familial) infantile epilepsy'), (0, 'Self-limited (familial) neonatal epilepsy'), (4, 'Self-limited epilepsy with autonomic seizures'), (3, 'Self-limited epilepsy with centrotemporal spikes'), (2, 'Self-limited familial neonatal-infantile epilepsy'), (9, 'Sleep-related hypermotor (hyperkinetic) epilepsy'), (30, 'Sturge–Weber syndrome')], default=None, help_text={'label': 'Select an identifiable epilepsy syndrome?', 'reference': 'Select an identifiable epilepsy syndrome?'}, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('multiaxial_diagnosis', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.multiaxialdiagnosis')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'historical Syndrome',
                'verbose_name_plural': 'historical Syndromes',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSite',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('site_is_actively_involved_in_epilepsy_care', models.BooleanField(default=False, null=True)),
                ('site_is_primary_centre_of_epilepsy_care', models.BooleanField(default=False, null=True)),
                ('site_is_childrens_epilepsy_surgery_centre', models.BooleanField(default=False, null=True)),
                ('site_is_paediatric_neurology_centre', models.BooleanField(default=False, null=True)),
                ('site_is_general_paediatric_centre', models.BooleanField(default=False, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('case', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.case')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('hospital_trust', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.hospitaltrust')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'historical Site',
                'verbose_name_plural': 'historical Sites',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRegistration',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('registration_date', models.DateField(default=None, help_text={'label': 'First paediatric assessment', 'reference': 'Setting this date is an irreversible step. Confirmation will be requested to complete this step.'}, null=True)),
                ('registration_close_date', models.DateField(default=None, help_text={'label': 'First paediatric assessment closing date', 'reference': 'Date on which the registration is due to close'}, null=True)),
                ('audit_submission_date', models.DateField(default=None, help_text={'label': 'Epilepsy12 submission date', 'reference': 'Date on which the audit submission is due. It is always on the 2nd Tuesday in January.'}, null=True)),
                ('eligibility_criteria_met', models.BooleanField(default=None, null=True)),
                ('cohort', models.PositiveSmallIntegerField(default=None, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('audit_progress', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.auditprogress')),
                ('case', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.case')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('kpi', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.kpi')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'historical Registration',
                'verbose_name_plural': 'historical Registrations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMultiaxialDiagnosis',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('syndrome_present', models.BooleanField(blank=True, default=None, help_text={'label': 'Is there an identifiable epilepsy syndrome?', 'reference': 'Is there an identifiable epilepsy syndrome?'}, null=True)),
                ('epilepsy_cause_known', models.BooleanField(blank=True, default=None, help_text={'label': 'Has a cause for the epilepsy been identified?', 'reference': 'Has a cause for the epilepsy been identified?'}, null=True)),
                ('epilepsy_cause', models.CharField(blank=True, default=None, help_text={'label': 'What is the main identified cause of the epilepsy?', 'reference': 'What is the main identified cause of the epilepsy?'}, max_length=50, null=True)),
                ('epilepsy_cause_categories', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=500), blank=True, default=list, help_text={'label': 'Which category/categories best apply to this epilepsy?', 'reference': 'Which category/categories best apply to this epilepsy?'}, null=True, size=None)),
                ('relevant_impairments_behavioural_educational', models.BooleanField(blank=True, default=None, help_text={'label': 'Are there any relevant impairment, behavioural, educational or emotional problems?', 'reference': 'Are there any relevant impairment, behavioural, educational or emotional problems?'}, null=True)),
                ('mental_health_screen', models.BooleanField(blank=True, default=None, help_text={'label': 'Has a mental health concern been sought?', 'reference': 'Is there evidence of the child being assessed for mental health problems via clinical enquiry or the use of a screening questionnaire?'}, null=True)),
                ('mental_health_issue_identified', models.BooleanField(blank=True, default=None, help_text={'label': 'Has a mental health issue been identified?', 'reference': 'Does the child have any mental health issue identified?'}, null=True)),
                ('mental_health_issue', models.CharField(blank=True, choices=[('AxD', 'Anxiety disorder'), ('EmB', 'Emotional/ behavioural'), ('MoD', 'Mood disorder'), ('SHm', 'Self harm'), ('Oth', 'Other')], default=None, help_text={'label': 'Add details of any known mental health problem(s)', 'reference': 'Add details of any known mental health problem(s)'}, max_length=3, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('registration', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.registration')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'historical Multiaxial Diagnosis',
                'verbose_name_plural': 'historical Multiaxial diagnosis assessments',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalManagement',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('has_an_aed_been_given', models.BooleanField(blank=True, default=None, help_text={'label': 'Has an antiseizure medicine been given?', 'reference': 'Has an antiseizure medicine been given?'}, null=True)),
                ('has_rescue_medication_been_prescribed', models.BooleanField(blank=True, default=None, help_text={'label': 'Has a rescue medicine been prescribed?', 'reference': 'Has a rescue medicine been prescribed?'}, null=True)),
                ('individualised_care_plan_in_place', models.BooleanField(blank=True, default=None, help_text={'label': 'Has care planning (either an individualised epilepsy document or copy clinic letter including care planning information) commenced?', 'reference': 'Has care planning (either an individualised epilepsy document or copy clinic letter including care planning information) commenced?'}, null=True)),
                ('individualised_care_plan_date', models.DateField(blank=True, default=None, help_text={'label': 'On what date was the individualised care plan put in place?', 'reference': 'On what date was the individualised care plan put in place?'}, null=True)),
                ('individualised_care_plan_has_parent_carer_child_agreement', models.BooleanField(blank=True, default=None, help_text={'label': 'Parent or carer and child agreement', 'reference': 'Has the parent or carer and child agreement to an individualised care plan been documented?'}, null=True)),
                ('individualised_care_plan_includes_service_contact_details', models.BooleanField(blank=True, default=None, help_text={'label': 'Service contact details', 'reference': 'Does the individualised care plan include service contact details?'}, null=True)),
                ('individualised_care_plan_include_first_aid', models.BooleanField(blank=True, default=None, help_text={'label': 'First aid advice', 'reference': 'Does the individualised care plan include first aid advice?'}, null=True)),
                ('individualised_care_plan_parental_prolonged_seizure_care', models.BooleanField(blank=True, default=None, help_text={'label': 'Parental advice on managing prolonged seizures', 'reference': 'Does the individualised care plan include parental advice on managing prolonged seizures?'}, null=True)),
                ('individualised_care_plan_includes_general_participation_risk', models.BooleanField(blank=True, default=None, help_text={'label': 'General participation and risk assessment', 'reference': 'Does the individualised care plan include general participation and risk assessment?'}, null=True)),
                ('individualised_care_plan_addresses_water_safety', models.BooleanField(blank=True, default=None, help_text={'label': 'Water safety', 'reference': 'Does the individualised care plan address water safety?'}, null=True)),
                ('individualised_care_plan_addresses_sudep', models.BooleanField(blank=True, default=None, help_text={'label': 'Sudden unexplained death in epilepsy (SUDEP)', 'reference': 'Does the individualised care plan address sudden unexplained death in epilepsy?'}, null=True)),
                ('individualised_care_plan_includes_ehcp', models.BooleanField(blank=True, default=None, help_text={'label': 'An educational health care plan (EHCP)', 'reference': 'Does the individualised care plan include an educational health care plan (EHCP)?'}, null=True)),
                ('has_individualised_care_plan_been_updated_in_the_last_year', models.BooleanField(blank=True, default=None, help_text={'label': 'Being updated as necessary', 'reference': 'Has the individualised care plan been updated in the last year?'}, null=True)),
                ('has_been_referred_for_mental_health_support', models.BooleanField(blank=True, default=None, help_text={'label': 'Has a referral for mental health support been made?', 'reference': 'Has the child been referred for support with their mental health?'}, null=True)),
                ('has_support_for_mental_health_support', models.BooleanField(blank=True, default=None, help_text={'label': 'Is mental health support in place?', 'reference': 'Is there evidence of the child receiving support for their mental health?'}, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('registration', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.registration', verbose_name='related registration')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'historical Management',
                'verbose_name_plural': 'historical Management Plans',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalKeyword',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('keyword', models.CharField(help_text='A validated keyword for describing the semiology of a seizure', max_length=100)),
                ('category', models.CharField(help_text='The semiology category each keyword belongs to.', max_length=100)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Keyword',
                'verbose_name_plural': 'historical Keywords',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalInvestigations',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('eeg_indicated', models.BooleanField(blank=True, default=None, help_text={'label': 'Has a first EEG been requested?', 'reference': 'All children with Epilepsy should have an EEG'}, null=True)),
                ('eeg_request_date', models.DateField(blank=True, default=None, help_text={'label': 'Date EEG requested', 'reference': 'Date EEG requested'}, null=True)),
                ('eeg_performed_date', models.DateField(blank=True, default=None, help_text={'label': 'Date EEG performed', 'reference': 'Date EEG performed'}, null=True)),
                ('twelve_lead_ecg_status', models.BooleanField(blank=True, default=None, help_text={'label': 'Has a 12-Lead ECG been performed?', 'reference': 'The Epilepsy12 standard is that all children with an convulsive episode should have a 12 lead ECG'}, null=True)),
                ('ct_head_scan_status', models.BooleanField(blank=True, default=None, help_text={'label': 'Has a CT head been performed?', 'reference': 'NICE states if MRI is contraindicated, consider a CT scan for children, young people and adults with epilepsy.'}, null=True)),
                ('mri_indicated', models.BooleanField(blank=True, default=None, help_text={'label': 'Has a brain MRI been requested?', 'reference': 'NICE recommends that an MRI scan should be offered to children, young people and adults diagnosed with epilepsy, unless they have idiopathic generalised epilepsy or self-limited epilepsy with centrotemporal spikes. The MRI should be carried out within 6 weeks of the MRI referral.'}, null=True)),
                ('mri_brain_requested_date', models.DateField(blank=True, default=None, help_text={'label': 'MRI brain requested date', 'reference': 'MRI brain requested date'}, null=True)),
                ('mri_brain_reported_date', models.DateField(blank=True, default=None, help_text={'label': 'Date MRI brain reported', 'reference': 'Date MRI brain reported'}, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('registration', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.registration', verbose_name='Related Registration')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'historical Investigations',
                'verbose_name_plural': 'historical Investigations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalHospitalTrust',
            fields=[
                ('OrganisationID', models.CharField(db_index=True, max_length=50)),
                ('OrganisationCode', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('OrganisationType', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('SubType', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('Sector', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('OrganisationStatus', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('IsPimsManaged', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('OrganisationName', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Address1', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Address2', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Address3', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('City', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('County', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Postcode', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Latitude', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Longitude', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('ParentODSCode', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('ParentName', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Phone', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Email', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Website', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Fax', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Hospital Trust',
                'verbose_name_plural': 'historical Hospital Trusts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFirstPaediatricAssessment',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('first_paediatric_assessment_in_acute_or_nonacute_setting', models.IntegerField(choices=[(1, 'Acute'), (2, 'Non-acute'), (3, "Don't know")], default=None, help_text={'label': 'Is the first paediatric assessment in an acute or nonacute setting?', 'reference': 'Is the first paediatric assessment in an acute or nonacute setting?'}, null=True)),
                ('has_number_of_episodes_since_the_first_been_documented', models.BooleanField(default=None, help_text={'label': 'The approximate frequency or number of episodes since the first episode', 'reference': 'Has the approximate frequency or number of episodes since the first recorded episode been documented?'}, null=True)),
                ('general_examination_performed', models.BooleanField(default=None, help_text={'label': 'General examination', 'reference': 'has a general paediatric examination been performed?'}, null=True)),
                ('neurological_examination_performed', models.BooleanField(default=None, help_text={'label': 'Neurological examination', 'reference': 'Has a neurological examination been performed?'}, null=True)),
                ('developmental_learning_or_schooling_problems', models.BooleanField(default=None, help_text={'label': 'Presence or absence of learning, developmental or educational difficulties', 'reference': 'Has the presence or absence of developmental, learning or school-based problems been recorded?'}, null=True)),
                ('behavioural_or_emotional_problems', models.BooleanField(default=None, help_text={'label': 'Presence or absence of emotional or behavioural problems', 'reference': 'Has the presence or absence of emotional or behavioural problems been documented?'}, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('registration', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.registration', verbose_name='Related Registration')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'historical First Paediatric Assessment',
                'verbose_name_plural': 'historical First Paediatric Assessments',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEpisode',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('seizure_onset_date', models.DateField(blank=True, default=None, help_text={'label': 'When did the first episode of this type happen?', 'reference': 'Date the first episode of this type occurred or was witnessed.'}, null=True)),
                ('seizure_onset_date_confidence', models.CharField(choices=[('Apx', 'Approximate date'), ('Exc', 'Exact date'), ('NK', 'Not known')], default=None, help_text={'label': 'Confidence in reported date of episode', 'reference': 'How accurate is the date of this episode?'}, max_length=3, null=True)),
                ('episode_definition', models.CharField(choices=[('a', 'This was a single episode'), ('b', 'This was a cluster within 24 hours'), ('c', 'These were 2 or more episodes more than 24 hours apart')], default=None, help_text={'label': 'Episode definition', 'reference': 'Episode definition. Part of case definition and defines if represents a cluster or discrete episodes.'}, max_length=1, null=True, verbose_name='Episode definition. Part of case definition and defines if represents a cluster or discrete episodes.')),
                ('has_description_of_the_episode_or_episodes_been_gathered', models.BooleanField(default=None, help_text={'label': 'Has a description of the episode or episodes been gathered?', 'reference': 'Has a description of the episode or episodes been gathered?'}, null=True)),
                ('description', models.CharField(blank=True, default='', help_text={'label': 'What is the episode(s) like and is the description adequate?', 'reference': 'What is the episode(s) like and is the description adequate?'}, max_length=5000, null=True)),
                ('description_keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(help_text='add a key word', max_length=500), blank=True, null=True, size=None)),
                ('epilepsy_or_nonepilepsy_status', models.CharField(blank=True, choices=[('E', 'Epileptic'), ('NE', 'Non-epileptic'), ('U', 'Uncertain')], default=None, help_text={'label': 'Is a diagnosis of epilepsy definite, or uncertain.', 'reference': 'Is a diagnosis of epilepsy definite, or uncertain.'}, max_length=3, null=True)),
                ('epileptic_seizure_onset_type', models.CharField(choices=[('FO', 'Focal onset'), ('GO', 'Generalised onset'), ('UO', 'Unknown onset'), ('UC', 'Unclassified')], default=None, help_text={'label': 'How best would describe the onset of the epileptic episode?', 'reference': 'How best would describe the onset of the epileptic episode?'}, max_length=3, null=True)),
                ('nonepileptic_seizure_type', models.CharField(blank=True, choices=[('BPP', 'Behavioral Psychological And Psychiatric Disorders'), ('MAD', 'Migraine Associated Disorders'), ('ME', 'Miscellaneous Events'), ('SRC', 'Sleep Related Conditions'), ('SAS', 'Syncope And Anoxic Seizures'), ('PMD', 'Paroxysmal Movement Disorders'), ('Oth', 'Other')], default=None, help_text={'label': 'How best describes the generalised nature of the nonepileptic episode(s)?', 'reference': 'How best describes the generalised nature of the nonepileptic episode(s)?'}, max_length=3, null=True)),
                ('epileptic_generalised_onset', models.CharField(blank=True, choices=[('AEM', 'Absence with eyelid myoclonia'), ('Aab', 'Atypical absence'), ('Ato', 'Atonic'), ('Clo', 'Clonic'), ('EpS', 'Epileptic spasms'), ('MAb', 'Myoclonic absence'), ('MAt', 'Myoclonic-atonic'), ('MTC', 'Myoclonic-tonic-clonic'), ('MyC', 'Myoclonic'), ('Oth', 'Other'), ('TAb', 'Typical absence'), ('TCl', 'Tonic-clonic'), ('Ton', 'Tonic')], default=None, help_text={'label': 'How best describes the generalised nature of the epileptic episode(s)?', 'reference': 'How best describes the generalised nature of the epileptic episode(s)?'}, max_length=3, null=True)),
                ('focal_onset_impaired_awareness', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_automatisms', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_atonic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_clonic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_left', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_right', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_epileptic_spasms', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_hyperkinetic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_myoclonic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_tonic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_autonomic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_behavioural_arrest', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_cognitive', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_emotional', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_sensory', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_centrotemporal', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_temporal', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_frontal', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_parietal', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_occipital', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_gelastic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_focal_to_bilateral_tonic_clonic', models.BooleanField(blank=True, default=None, null=True)),
                ('nonepileptic_seizure_unknown_onset', models.CharField(blank=True, choices=[('BAr', 'Behaviour arrest'), ('EpS', 'Epileptic spasms'), ('TCl', 'Tonic-clonic'), ('Oth', 'Other')], default=None, help_text={'label': 'How best describes the generalised nature of the nonepileptic episode(s)?', 'reference': 'How best describes the generalised nature of the nonepileptic episode(s)?'}, max_length=3, null=True)),
                ('nonepileptic_seizure_syncope', models.CharField(blank=True, choices=[('a', 'Vasovagal syncope'), ('b', 'Reflex anoxic seizures'), ('c', 'Breath-holding attacks'), ('d', 'Hyperventilation syncope'), ('e', 'Compulsive valsalva'), ('f', 'Neurological syncope'), ('g', 'Imposed upper airways obstruction'), ('h', 'Orthostatic intolerance'), ('i', 'Long QT and cardiac syncope'), ('j', 'Hyper-cyanotic spells')], default=None, help_text={'label': 'How best describes the <i>type</i> of syncope?', 'reference': 'How best describes the <i>type</i> of syncope?'}, max_length=3, null=True)),
                ('nonepileptic_seizure_behavioural', models.CharField(blank=True, choices=[('a', 'Daydreaming / Inattention'), ('b', 'Infantile gratification'), ('c', 'Eidetic imagery'), ('d', 'Tantrums and rage reactions'), ('e', 'Out of body experiences'), ('f', 'Panic attacks'), ('g', 'Dissociative states'), ('h', 'Non-epileptic seizures'), ('i', 'Hallucinations in psychiatric disorders'), ('j', 'Fabricated / factitious illness')], default=None, help_text={'label': 'How best describes the <i>type</i> of behavioural episode?', 'reference': 'How best describes the <i>type</i> of behavioural episode?'}, max_length=3, null=True)),
                ('nonepileptic_seizure_sleep', models.CharField(blank=True, choices=[('a', 'Sleep related rhythmic movement disorders'), ('b', 'Hypnogogic jerks'), ('c', 'Parasomnias'), ('d', 'REM sleep disorders'), ('e', 'Benign neonatal sleep myoclonus'), ('f', 'Periodic leg movements'), ('g', 'Narcolepsy-cataplexy')], default=None, help_text={'label': 'How best describes the <i>type</i> of sleep event?', 'reference': 'How best describes the <i>type</i> of sleep event?'}, max_length=3, null=True)),
                ('nonepileptic_seizure_paroxysmal', models.CharField(blank=True, choices=[('a', 'Tics'), ('b', 'Stereotypies'), ('c', 'Paroxysmal kinesigenic dyskinesia'), ('d', 'Paroxysmal nonkinesigenic dyskinesia'), ('e', 'Paroxysmal exercise induced dyskinesia'), ('f', 'Benign paroxysmal tonic upgaze'), ('g', 'Episodic ataxias'), ('h', 'Alternating hemiplegia'), ('i', 'Hyperekplexia'), ('j', 'Opsoclonus-myoclonus syndrome')], default=None, help_text={'label': 'How best describes the <i>type</i> of paroxysmal event?', 'reference': 'How best describes the <i>type</i> of paroxysmal event?'}, max_length=3, null=True)),
                ('nonepileptic_seizure_migraine', models.CharField(blank=True, choices=[('a', 'Migraine with visual aura'), ('b', 'Familial hemiplegic migraine'), ('c', 'Benign paroxysmal torticollis'), ('d', 'Benign paroxysmal vertigo'), ('e', 'Cyclical vomiting')], default=None, help_text={'label': 'How best describes the <i>type</i> of migraine?', 'reference': 'How best describes the <i>type</i> of migraine?'}, max_length=3, null=True)),
                ('nonepileptic_seizure_miscellaneous', models.CharField(blank=True, choices=[('a', 'Benign myoclonus of infancy and shuddering attacks'), ('b', 'Jitteriness'), ('c', 'Sandifer syndrome'), ('d', 'Non-epileptic head drops'), ('e', 'Spasmus nutans'), ('f', 'Raised intracranial pressure'), ('g', 'Paroxysmal extreme pain disorder'), ('h', 'Spinal myoclonus')], default=None, help_text={'label': 'How best describes the <i>subtype</i>?', 'reference': 'How best describes the <i>subtype</i>?'}, max_length=3, null=True)),
                ('nonepileptic_seizure_other', models.CharField(blank=True, default=None, max_length=250, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('multiaxial_diagnosis', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.multiaxialdiagnosis')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'historical Episode',
                'verbose_name_plural': 'historical Episodes',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEpilepsyContext',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('previous_febrile_seizure', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), ('U', 'Uncertain')], default=None, help_text={'label': 'At any point in time has the child had febrile seizure(s)?', 'reference': 'At any point in time has the child had febrile seizure(s)?'}, max_length=2, null=True)),
                ('previous_acute_symptomatic_seizure', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), ('U', 'Uncertain')], default=None, help_text={'label': 'At any point in time has the child had acute symptomatic seizure(s)?', 'reference': 'At any point in time has the child had acute symptomatic seizure(s)?'}, max_length=2, null=True)),
                ('is_there_a_family_history_of_epilepsy', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), ('U', 'Uncertain')], default=None, help_text={'label': 'Is there a family history of epilepsy?', 'reference': 'Is there a family history of epilepsy?'}, max_length=3, null=True)),
                ('previous_neonatal_seizures', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), ('U', 'Uncertain')], default=None, help_text={'label': 'Were there seizures in the neonatal period?', 'reference': 'Were there seizures in the neonatal period?'}, max_length=2, null=True)),
                ('diagnosis_of_epilepsy_withdrawn', models.BooleanField(default=None, help_text={'label': 'has the diagnosis of epilepsy been withdrawn?', 'reference': 'In the first year after first assessment, has a diagnosis of epilepsy been withdrawn because it has been subsequently deemed incorrect?'}, null=True)),
                ('were_any_of_the_epileptic_seizures_convulsive', models.BooleanField(default=None, help_text={'label': 'Were any of the epileptic seizures convulsive?', 'reference': 'Were any of the epileptic seizures convulsive?'}, null=True)),
                ('experienced_prolonged_generalized_convulsive_seizures', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), ('U', 'Uncertain')], default=None, help_text={'label': 'Has the child at any point in time experienced prolonged generalised seizures?', 'reference': 'Has the child at any point in time experienced prolonged generalised convulsive seizures > 5 min duration (or successive continuing > 5min)?'}, max_length=2, null=True)),
                ('experienced_prolonged_focal_seizures', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), ('U', 'Uncertain')], default=None, help_text={'label': 'Has the child at any point in time experienced prolonged focal seizures?', 'reference': 'Has the child at any point in time experienced prolonged focal convulsive seizures > 5 min duration (or successive continuing > 5min)?'}, max_length=2, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('registration', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.registration')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'historical Epilepsy Context',
                'verbose_name_plural': 'historical Epilepsy Contexts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEpilepsy12User',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('first_name', models.CharField(blank=True, help_text='Enter your first name', max_length=150, null=True, verbose_name='First name')),
                ('surname', models.CharField(blank=True, help_text='Enter your surname', max_length=150, null=True, verbose_name='Surname')),
                ('title', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Mr'), (2, 'Mrs'), (3, 'Ms'), (4, 'Dr'), (5, 'Professor')], null=True)),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'This email address is already in use.'}, help_text='Enter your email address.', max_length=254, verbose_name='Email address')),
                ('bio', models.CharField(blank=True, help_text='Share something about yourself.', max_length=500, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_rcpch_audit_team_member', models.BooleanField(default=False)),
                ('view_preference', models.SmallIntegerField(choices=[(0, 'hospital'), (1, 'trust'), (2, 'national')], default=0)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('role', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Audit Centre Lead Clinician'), (2, 'Audit Centre Clinician'), (3, 'Audit Centre Administrator'), (4, 'RCPCH Audit Lead'), (5, 'RCPCH Audit Analyst'), (6, 'RCPCH Audit Administrator'), (7, 'RCPCH Audit Children and Family')], null=True)),
                ('twitter_handle', models.CharField(blank=True, max_length=255, null=True)),
                ('email_confirmed', models.BooleanField(default=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('hospital_employer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.hospitaltrust')),
            ],
            options={
                'verbose_name': 'historical Epilepsy12 User',
                'verbose_name_plural': 'historical Epilepsy12 Users',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalComorbidity',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('comorbidity_diagnosis_date', models.DateField(default=None, help_text={'label': 'What is the date of diagnosis?', 'reference': 'What is the date of diagnosis?'}, max_length=50, null=True)),
                ('comorbidity_diagnosis', models.CharField(default=None, help_text={'label': 'What is the comorbidity?', 'reference': 'What is the comorbidity?'}, max_length=50, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('multiaxial_diagnosis', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.multiaxialdiagnosis')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'historical Comorbidity',
                'verbose_name_plural': 'historical Comorbidities',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCase',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('locked', models.BooleanField(blank=True, default=False, null=True, verbose_name="\n        This determines if the case is locked from editing\n        Cases can be locked under either of 2 sets of circumstances\n        1. The child has opted out of the audit \n        - here all data relating to the child's ID is set to None but the ID retained.\n        - in the UI, blank spaces in the case_list are rendered as ######\n        2. All the fields for the child have been completed and the user has indicated the child is ready for submission.\n        - The upload button in the UI is enabled up until the submission deadline to toggle the locked status\n        3. The submission deadline has passed. The case is locked, irrespective of if fields are complete are not.\n        Locked")),
                ('locked_at', models.DateTimeField(blank=True, null=True, verbose_name='Date record locked')),
                ('nhs_number', models.CharField(blank=True, db_index=True, max_length=10, null=True, verbose_name='NHS Number')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='first name')),
                ('surname', models.CharField(blank=True, max_length=100, null=True, verbose_name='surname')),
                ('sex', models.IntegerField(blank=True, choices=[(0, 'Not Known'), (1, 'Male'), (2, 'Female'), (9, 'Not Specified')], null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth (YYYY-MM-DD)')),
                ('postcode', models.CharField(blank=True, max_length=8, null=True, verbose_name='postcode')),
                ('ethnicity', models.CharField(blank=True, choices=[('N', 'African'), ('L', 'Any other Asian background'), ('P', 'Any other Black background'), ('S', 'Any other ethnic group'), ('G', 'Any other mixed background'), ('C', 'Any other White background'), ('K', 'Bangladeshi or British Bangladeshi'), ('A', 'British, Mixed British'), ('M', 'Caribbean'), ('R', 'Chinese'), ('H', 'Indian or British Indian'), ('B', 'Irish'), ('Z', 'Not Stated'), ('J', 'Pakistani or British Pakistani'), ('F', 'White and Asian'), ('E', 'White and Black African'), ('D', 'White and Black Caribbean')], max_length=4, null=True)),
                ('index_of_multiple_deprivation_quintile', models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='index of multiple deprivation calculated from MySociety data.')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('locked_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='locked by')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'historical Patient',
                'verbose_name_plural': 'historical Patients',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAssessment',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('childrens_epilepsy_surgical_service_referral_criteria_met', models.BooleanField(blank=True, default=None, help_text={'label': 'Are ANY of these criteria present?', 'reference': "Have ANY of the criteria for referral to a children's epilepsy surgery service been met?"}, null=True)),
                ('consultant_paediatrician_referral_made', models.BooleanField(blank=True, default=None, help_text={'label': 'Has a referral been made to a consultant paediatrician with expertise in epilepsies?', 'reference': 'Has a referral been made to a consultant paediatrician with expertise in epilepsies?'}, null=True)),
                ('consultant_paediatrician_referral_date', models.DateField(blank=True, default=None, help_text={'label': 'Date of referral to a consultant paediatrician with expertise in epilepsies.', 'reference': 'Has a referral been made to a consultant paediatrician with expertise in epilepsies?'}, null=True)),
                ('consultant_paediatrician_input_date', models.DateField(blank=True, default=None, help_text={'label': 'Date seen by a consultant paediatrician with expertise in epilepsies.', 'reference': 'Date seen by a consultant paediatrician with expertise in epilepsies.'}, null=True)),
                ('paediatric_neurologist_referral_made', models.BooleanField(blank=True, default=None, help_text={'label': 'Has a referral to a consultant paediatric neurologist been made?', 'reference': 'Has a referral to a consultant paediatric neurologist been made?'}, null=True)),
                ('paediatric_neurologist_referral_date', models.DateField(blank=True, default=None, help_text={'label': 'Date of referral to a consultant paediatric neurologist.', 'reference': 'Date of referral to a consultant paediatric neurologist.'}, null=True)),
                ('paediatric_neurologist_input_date', models.DateField(blank=True, default=None, help_text={'label': 'Date seen by consultant paediatric neurologist.', 'reference': 'Date seen by consultant paediatric neurologist.'}, null=True)),
                ('childrens_epilepsy_surgical_service_referral_made', models.BooleanField(blank=True, default=None, help_text={'label': "Has a referral to a children's epilepsy surgery service been made?", 'reference': "Has a referral to a children's epilepsy surgery service been made?"}, null=True)),
                ('childrens_epilepsy_surgical_service_referral_date', models.DateField(blank=True, default=None, help_text={'label': "Date of referral to a children's epilepsy surgery service", 'reference': "Date of referral to a children's epilepsy surgery service"}, null=True)),
                ('childrens_epilepsy_surgical_service_input_date', models.DateField(blank=True, default=None, help_text={'label': "Date seen by children's epilepsy surgery service", 'reference': "Date seen by children's epilepsy surgery service"}, null=True)),
                ('epilepsy_specialist_nurse_referral_made', models.BooleanField(blank=True, default=None, help_text={'label': 'Has a referral to an epilepsy nurse specialist been made?', 'reference': 'Has a referral to an epilepsy nurse specialist been made?'}, null=True)),
                ('epilepsy_specialist_nurse_referral_date', models.DateField(blank=True, default=None, help_text={'label': 'Date of referral to an epilepsy nurse specialist', 'reference': 'Date of referral to an epilepsy nurse specialist'}, null=True)),
                ('epilepsy_specialist_nurse_input_date', models.DateField(blank=True, default=None, help_text={'label': 'Date seen by an epilepsy nurse specialist', 'reference': 'Date seen by an epilepsy nurse specialist'}, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('registration', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.registration', verbose_name='related registration')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'historical Assessment',
                'verbose_name_plural': 'historical Assessment',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAntiEpilepsyMedicine',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('medicine_id', models.IntegerField(blank=True, default=None, help_text={'label': 'Medicine Name', 'reference': 'Please enter the medicine.'}, null=True)),
                ('medicine_name', models.CharField(blank=True, default=None, help_text={'label': 'Medicine name', 'reference': 'Please enter the medicine name.'}, max_length=200, null=True)),
                ('is_rescue_medicine', models.BooleanField(blank=True, default=None, help_text={'label': 'Is the medicine a rescue medicine?', 'reference': 'Is the medicine a rescue medicine?'}, null=True)),
                ('antiepilepsy_medicine_snomed_code', models.CharField(blank=True, default=None, help_text={'label': 'Antiseizure/rescue medicine SNOMED-CT code', 'reference': 'Antiseizure medicine SNOMED-CT code'}, max_length=50, null=True)),
                ('antiepilepsy_medicine_snomed_preferred_name', models.CharField(blank=True, default=None, help_text={'label': 'Antiseizure/rescue medicine SNOMED-CT preferred name', 'reference': 'Antiseizure medicine SNOMED-CT preferred name'}, max_length=50, null=True)),
                ('antiepilepsy_medicine_start_date', models.DateField(blank=True, default=None, help_text={'label': 'Medicine start date', 'reference': 'Antiepilepsy medicine start date'}, null=True)),
                ('antiepilepsy_medicine_stop_date', models.DateField(blank=True, default=None, help_text={'label': 'Medicine discontinued date', 'reference': 'Antiseizure medicine discontinued date'}, null=True)),
                ('antiepilepsy_medicine_risk_discussed', models.BooleanField(blank=True, default=None, help_text={'label': 'Medication risks discussed?', 'reference': 'Have the risks related to the antiseizure medicine been discussed with the child/young person and their family?'}, null=True)),
                ('is_a_pregnancy_prevention_programme_needed', models.BooleanField(blank=True, default=None, help_text={'label': 'Is a pregnancy prevention programme indicated?', 'reference': 'For girls and young women who are presecribed sodium valproate, it is recommended that pregnancy prevention is actively discussed and documented.'}, null=True)),
                ('has_a_valproate_annual_risk_acknowledgement_form_been_completed', models.BooleanField(blank=True, default=None, help_text={'label': 'Has a Valproate - Annual Risk Acknowledgment Form been completed?', 'reference': 'For girls and young women who are presecribed sodium valproate, it is recommended that Has an annual Valproate - Annual Risk Acknowledgment Form is completed.'}, null=True)),
                ('is_a_pregnancy_prevention_programme_in_place', models.BooleanField(blank=True, default=None, help_text={'label': 'Is the Valproate Pregnancy Prevention Programme in place?', 'reference': 'For girls and young women who are presecribed sodium valproate, it is recommended that pregnancy prevention is actively discussed and documented.'}, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('management', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='epilepsy12.management', verbose_name='related management')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'historical Antiepilepsy Medicine',
                'verbose_name_plural': 'historical Antiepilepsy Medicines',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
